{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\GeneralManage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport 'antd/dist/antd.css';\nimport { Form, Input, InputNumber, Button } from 'antd';\nimport { getSpecificEmployeeByKey, getSpecificBranchByKey } from './MockData';\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nexport function GeneralDisplayPage(props) {\n  const _useState = useState([{\n    key: \"0\",\n    data: [{\n      name: '',\n      value: ''\n    }]\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        Data = _useState2[0],\n        setData = _useState2[1];\n\n  useEffect(() => {\n    if (props.GenKey !== undefined) {\n      let splt = props.GenKey.split(',');\n\n      switch (splt[splt.length - 1]) {\n        case 'L':\n        case 'B':\n          break;\n\n        case 'E':\n          setData(getSpecificEmployeeByKey(splt[0]));\n          break;\n\n        default:\n          setData(getSpecificBranchByKey(splt[0]));\n          break;\n      }\n    }\n  }, [props.GenKey]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, Data.map(memes => {\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, memes.key), memes.data.map(Values => {\n      return React.createElement(\"li\", {\n        key: \"\".concat(memes.key).concat(Values.name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, Values.name)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, Values.value));\n    }));\n  }));\n}\nGeneralDisplayPage.propTypes = {\n  GenKey: PropTypes.string.isRequired\n};\nexport default GeneralDisplayPage;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\GeneralManage.js"],"names":["React","useState","useEffect","PropTypes","Form","Input","InputNumber","Button","getSpecificEmployeeByKey","getSpecificBranchByKey","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","GeneralDisplayPage","props","key","data","name","value","Data","setData","GenKey","undefined","splt","split","length","map","memes","Values","propTypes","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,WAAtB,EAAmCC,MAAnC,QAAiD,MAAjD;AAEA,SAAQC,wBAAR,EAAkCC,sBAAlC,QAA+D,YAA/D;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE;AADE,GADC;AAIXC,EAAAA,UAAU,EAAE;AACVD,IAAAA,IAAI,EAAE;AADI;AAJD,CAAf;AAQE,MAAME,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,yBADa;AAEvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,uBADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAFgB;AAMvBA,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE;AADD;AANe,CAAzB;AAWF,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA,oBACdpB,QAAQ,CAAC,CAAC;AAACqB,IAAAA,GAAG,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,CAAC;AAACC,MAAAA,IAAI,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE;AAAlB,KAAD;AAAjB,GAAD,CAAD,CADM;AAAA;AAAA,QAC/BC,IAD+B;AAAA,QACzBC,OADyB;;AAGtCzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGmB,KAAK,CAACO,MAAN,KAAiBC,SAApB,EACA;AACF,UAAIC,IAAI,GAAGT,KAAK,CAACO,MAAN,CAAaG,KAAb,CAAmB,GAAnB,CAAX;;AACA,cAAQD,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAAZ;AACE,aAAK,GAAL;AACA,aAAK,GAAL;AACI;;AACJ,aAAK,GAAL;AACIL,UAAAA,OAAO,CAACnB,wBAAwB,CAACsB,IAAI,CAAC,CAAD,CAAL,CAAzB,CAAP;AACF;;AACA;AACEH,UAAAA,OAAO,CAAClB,sBAAsB,CAACqB,IAAI,CAAC,CAAD,CAAL,CAAvB,CAAP;AACD;AATL;AAWD;AAAC,GAfO,EAeL,CAACT,KAAK,CAACO,MAAP,CAfK,CAAT;AAgBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCF,IAAI,CAACO,GAAL,CAASC,KAAK,IAAI;AACf,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAK,CAACZ,GAAX,CADG,EAEFY,KAAK,CAACX,IAAN,CAAWU,GAAX,CAAeE,MAAM,IAAI;AACtB,aACI;AAAI,QAAA,GAAG,YAAKD,KAAK,CAACZ,GAAX,SAAiBa,MAAM,CAACX,IAAxB,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIW,MAAM,CAACX,IAAX,CAAH,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIW,MAAM,CAACV,KAAX,CAFJ,CADJ;AAMH,KAPA,CAFE,CAAP;AAYH,GAbA,CADD,CADJ;AAkBH;AAGDL,kBAAkB,CAACgB,SAAnB,GAA+B;AAC3BR,EAAAA,MAAM,EAAEzB,SAAS,CAACkC,MAAV,CAAiBC;AADE,CAA/B;AAIE,eAAelB,kBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Input, InputNumber, Button } from 'antd';\r\n\r\nimport {getSpecificEmployeeByKey, getSpecificBranchByKey} from './MockData'\r\n\r\nconst layout = {\r\n    labelCol: {\r\n      span: 8,\r\n    },\r\n    wrapperCol: {\r\n      span: 16,\r\n    },\r\n  };\r\n  const validateMessages = {\r\n    required: 'This field is required!',\r\n    types: {\r\n      email: 'Not a validate email!',\r\n      number: 'Not a validate number!',\r\n    },\r\n    number: {\r\n      range: 'Must be between ${min} and ${max}',\r\n    },\r\n  };\r\n\r\nexport function GeneralDisplayPage(props) {\r\n    const [Data, setData] = useState([{key: \"0\", data: [{name: '', value: ''}]}]);\r\n    \r\n    useEffect(() => {\r\n        if(props.GenKey !== undefined)\r\n        {\r\n      let splt = props.GenKey.split(',');\r\n      switch (splt[splt.length - 1]) {\r\n        case 'L':\r\n        case 'B':\r\n            break;\r\n        case 'E':\r\n            setData(getSpecificEmployeeByKey(splt[0]));\r\n          break;\r\n          default:\r\n            setData(getSpecificBranchByKey(splt[0]));\r\n           break;\r\n      }\r\n    }}, [props.GenKey]);\r\n    return (\r\n        <div>\r\n        {Data.map(memes => {\r\n            return(<form>\r\n                <h2>{memes.key}</h2>\r\n                {memes.data.map(Values => {\r\n                    return(\r\n                        <li key={`${memes.key}${Values.name}`}>\r\n                            <p><b>{Values.name}</b></p>\r\n                            <p>{Values.value}</p>\r\n                        </li>\r\n                    );\r\n                })}\r\n                </form>\r\n            );\r\n        })}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nGeneralDisplayPage.propTypes = {\r\n    GenKey: PropTypes.string.isRequired,\r\n  };\r\n\r\n  export default GeneralDisplayPage;"]},"metadata":{},"sourceType":"module"}