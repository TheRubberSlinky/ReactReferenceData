{"ast":null,"code":"var _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\calls.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\"; //async function to search the tree\n\nexport async function treeSearch(url, e) {\n  if (e != \"\") {\n    const url = \"\".concat(url).concat(e);\n    let obj = [];\n    const response = await fetch(url, {\n      method: \"GET\"\n    });\n    const json = await response.json();\n    json.map(Main => {\n      obj.push({\n        title: Main.data[2].value,\n        key: Main.data[1].value,\n        icon: Main.data[3].value === \"0\" ? React.createElement(HomeOutlined, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }) : React.createElement(UserOutlined, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }),\n        isLeaf: Main.data[3].value === \"0\" ? false : true\n      });\n    });\n    return obj;\n  } else {\n    return [];\n  }\n}\nexport async function GetChildNodes(callUrl, ParentKey) {\n  const url = \"\".concat(callUrl).concat(ParentKey);\n  let obj = [];\n  const response = await fetch(url, {\n    method: \"GET\"\n  });\n  const json = await response.json();\n  json.map(Main => {\n    obj.push({\n      title: Main.name,\n      key: Main.id,\n      //icon: <HomeOutlined />, //find out how the response works to see fi it is a branch or employee\n      isLeaf: false //find out ow the response works to see if it is a branch or employee\n\n    }); //   obj.push({\n    //     //Update this to represent his code\n    //     title: Main.data[2].value,\n    //     key: Main.data[1].value,\n    //     icon: Main.data[3].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\n    //     isLeaf: Main.data[3].value === \"0\" ? false : true,\n    //   });\n  });\n  return obj;\n}","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\calls.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","treeSearch","url","e","obj","response","fetch","method","json","map","Main","push","title","data","value","key","icon","isLeaf","GetChildNodes","callUrl","ParentKey","name","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,KAA7C,QAA0D,MAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,mBAA3C,C,CAEA;;AACA,OAAO,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,CAA/B,EAAkC;AACvC,MAAIA,CAAC,IAAI,EAAT,EAAa;AACX,UAAMD,GAAG,aAAMA,GAAN,SAAYC,CAAZ,CAAT;AACA,QAAIC,GAAG,GAAG,EAAV;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AAChCK,MAAAA,MAAM,EAAE;AADwB,KAAN,CAA5B;AAGA,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACAA,IAAAA,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAU;AACjBN,MAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,QAAAA,KAAK,EAAEF,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KADb;AAEPC,QAAAA,GAAG,EAAEL,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KAFX;AAGPE,QAAAA,IAAI,EAAEN,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KAAb,KAAuB,GAAvB,GAA6B,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA7B,GAAgD,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAH/C;AAIPG,QAAAA,MAAM,EAAEP,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KAAb,KAAuB,GAAvB,GAA6B,KAA7B,GAAqC;AAJtC,OAAT;AAMD,KAPD;AAQA,WAAOV,GAAP;AACD,GAhBD,MAgBO;AACL,WAAO,EAAP;AACD;AACF;AAED,OAAO,eAAec,aAAf,CAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AACtD,QAAMlB,GAAG,aAAMiB,OAAN,SAAgBC,SAAhB,CAAT;AACA,MAAIhB,GAAG,GAAG,EAAV;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AAChCK,IAAAA,MAAM,EAAE;AADwB,GAAN,CAA5B;AAGA,QAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACAA,EAAAA,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAU;AACjBN,IAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,MAAAA,KAAK,EAAEF,IAAI,CAACW,IADL;AAEPN,MAAAA,GAAG,EAAEL,IAAI,CAACY,EAFH;AAGP;AACAL,MAAAA,MAAM,EAAE,KAJD,CAIQ;;AAJR,KAAT,EADiB,CAOjB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAdD;AAeA,SAAOb,GAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\n\r\n//async function to search the tree\r\nexport async function treeSearch(url, e) {\r\n  if (e != \"\") {\r\n    const url = `${url}${e}`;\r\n    let obj = [];\r\n    const response = await fetch(url, {\r\n      method: \"GET\",\r\n    });\r\n    const json = await response.json();\r\n    json.map((Main) => {\r\n      obj.push({\r\n        title: Main.data[2].value,\r\n        key: Main.data[1].value,\r\n        icon: Main.data[3].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\r\n        isLeaf: Main.data[3].value === \"0\" ? false : true,\r\n      });\r\n    });\r\n    return obj;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function GetChildNodes(callUrl, ParentKey) {\r\n  const url = `${callUrl}${ParentKey}`;\r\n  let obj = [];\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n  });\r\n  const json = await response.json();\r\n  json.map((Main) => {\r\n    obj.push({\r\n      title: Main.name,\r\n      key: Main.id,\r\n      //icon: <HomeOutlined />, //find out how the response works to see fi it is a branch or employee\r\n      isLeaf: false, //find out ow the response works to see if it is a branch or employee\r\n    });\r\n    //   obj.push({\r\n    //     //Update this to represent his code\r\n    //     title: Main.data[2].value,\r\n    //     key: Main.data[1].value,\r\n    //     icon: Main.data[3].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\r\n    //     isLeaf: Main.data[3].value === \"0\" ? false : true,\r\n    //   });\r\n  });\r\n  return obj;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}