{"ast":null,"code":"import _objectSpread from \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\GeneralManage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, NumberInput, Select, Layout, Button } from \"antd\";\nimport { getSpecificEmployeeByKey, getSpecificBranchByKey, PostData, GetTreeData } from \"./MockData\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: \"This field is required!\",\n  types: {\n    email: \"Not a validate email!\",\n    number: \"Not a validate number!\"\n  },\n  number: {\n    range: \"Must be between ${min} and ${max}\"\n  }\n};\nconst defaultBranch = [{\n  key: \"0\",\n  data: [{\n    name: \"BranchCode\",\n    value: \"\"\n  }, {\n    name: \"BranchName\",\n    value: \"\"\n  }, {\n    name: \"BranchCategory\",\n    value: \"\"\n  }, {\n    name: \"ParentBranch\",\n    value: \"\"\n  }]\n}];\nconst defaultEmployee = [{\n  key: \"0\",\n  data: [{\n    name: \"EmployeeNumber\",\n    value: \"\"\n  }, {\n    name: \"EmployeeName\",\n    value: \"\"\n  }, {\n    name: \"EmployeeSurname\",\n    value: \"\"\n  }, {\n    name: \"EmployeeLastLoggedIn\",\n    value: \"\"\n  }, {\n    name: \"EmployeeID\",\n    value: \"\"\n  }, {\n    name: \"EmployeeBranch\",\n    value: [{\n      value: \"Branch1\"\n    }, {\n      value: \"Branch2\"\n    }, {\n      value: \"Branch3\"\n    }, {\n      value: \"Branch4\"\n    }, {\n      value: \"Branch5\"\n    }]\n  }]\n}];\nconst Option = Select.Option;\nexport function GeneralDisplayPage(props) {\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const _useState = useState(defaultBranch),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  let Data = defaultBranch;\n\n  const onFinish = values => {\n    console.log(props.type, props.isEdit, values);\n    PostData(props.type, props.isEdit, values); //post it\n  }; // if (props.GenKey !== undefined) {\n  //   switch (props.type) {\n  //     case \"Branch\":\n  //       Data = props.isEdit\n  //         ? getSpecificBranchByKey(props.GenKey)\n  //         : defaultBranch;\n  //       break;\n  //     case \"Employee\":\n  //       Data = props.isEdit\n  //         ? getSpecificEmployeeByKey(props.GenKey)\n  //         : defaultEmployee;\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  //}\n\n\n  useEffect(() => {// async function GetTreeData() {\n    //   const url = `https://localhost:5001/api/tree?code=${props.GenKey}&type=${\n    //     props.type === \"Branch\" ? 0 : 1\n    //   }`;\n    //   let obj = [];\n    //   let objDta = [];\n    //   await fetch(url, {\n    //     method: \"GET\",\n    //     headers: new Headers({\n    //       Accept: \"application/vnd.github.cloak-preview\"\n    //     })\n    //   })\n    //     .then(res => res.json())\n    //     .then(response => {\n    //       console.log(response);\n    //       response.map(Main => {\n    //         objDta.push({\n    //           name: Main.name,\n    //           value: Main.value\n    //         });\n    //         // title: Main.data[0].value,\n    //         // key: Main.data[1].value,\n    //         // isLeaf: Main.data[2].value === \"0\" ? false : true\n    //         obj.push({ key: Main.key, Data: objDta });\n    //       });\n    //       setData(obj);\n    //       data[0].data.map(x =>\n    //         form.setFieldsValue({\n    //           [x.name]: x.value\n    //         })\n    //       );\n    //     })\n    //     .catch(error => {\n    //       console.log(error);\n    //     });\n    // }\n    // GetTreeData();\n  }, []);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, data.map(memes => {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, props.isEdit ? \"Editing for \".concat(props.GenKey) : \"Adding new \".concat(props.type, \" for \").concat(props.Genkey)), React.createElement(Form, Object.assign({\n      form: form\n    }, layout, {\n      name: \"nest-messages\",\n      onFinish: onFinish,\n      validateMessages: validateMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), memes.data.map(field => {\n      return Array.isArray(field.value) ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, field.name, React.createElement(Select, {\n        name: field.name,\n        style: {\n          width: \"65%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, field.value.map(option => {\n        return React.createElement(Option, {\n          value: option.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, option.value);\n      }))) : React.createElement(Form.Item, {\n        label: field.name,\n        name: field.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Input, {\n        label: field.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }));\n    }), React.createElement(Form.Item, {\n      wrapperCol: _objectSpread({}, layout.wrapperCol, {\n        offset: 8\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Submit\"))));\n  }));\n}\nGeneralDisplayPage.propTypes = {\n  GenKey: PropTypes.string.isRequired,\n  isEdit: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default GeneralDisplayPage;","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\GeneralManage.js"],"names":["React","useState","useEffect","PropTypes","Form","Input","NumberInput","Select","Layout","Button","getSpecificEmployeeByKey","getSpecificBranchByKey","PostData","GetTreeData","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","defaultBranch","key","data","name","value","defaultEmployee","Option","GeneralDisplayPage","props","useForm","form","setData","Data","onFinish","values","console","log","type","isEdit","map","memes","GenKey","Genkey","field","Array","isArray","width","option","offset","propTypes","string","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, NumberInput, Select, Layout, Button } from \"antd\";\r\n\r\nimport {\r\n  getSpecificEmployeeByKey,\r\n  getSpecificBranchByKey,\r\n  PostData,\r\n  GetTreeData\r\n} from \"./MockData\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8\r\n  },\r\n  wrapperCol: {\r\n    span: 16\r\n  }\r\n};\r\nconst validateMessages = {\r\n  required: \"This field is required!\",\r\n  types: {\r\n    email: \"Not a validate email!\",\r\n    number: \"Not a validate number!\"\r\n  },\r\n  number: {\r\n    range: \"Must be between ${min} and ${max}\"\r\n  }\r\n};\r\nconst defaultBranch = [\r\n  {\r\n    key: \"0\",\r\n    data: [\r\n      {\r\n        name: \"BranchCode\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"BranchName\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"BranchCategory\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"ParentBranch\",\r\n        value: \"\"\r\n      }\r\n    ]\r\n  }\r\n];\r\nconst defaultEmployee = [\r\n  {\r\n    key: \"0\",\r\n    data: [\r\n      {\r\n        name: \"EmployeeNumber\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeName\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeSurname\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeLastLoggedIn\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeID\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeBranch\",\r\n        value: [\r\n          { value: \"Branch1\" },\r\n          { value: \"Branch2\" },\r\n          { value: \"Branch3\" },\r\n          { value: \"Branch4\" },\r\n          { value: \"Branch5\" }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\nconst { Option } = Select;\r\nexport function GeneralDisplayPage(props) {\r\n  const [form] = Form.useForm();\r\n  const [data, setData] = useState(defaultBranch);\r\n\r\n  let Data = defaultBranch;\r\n\r\n  const onFinish = values => {\r\n    console.log(props.type, props.isEdit, values);\r\n    PostData(props.type, props.isEdit, values);\r\n    //post it\r\n  };\r\n  // if (props.GenKey !== undefined) {\r\n  //   switch (props.type) {\r\n  //     case \"Branch\":\r\n  //       Data = props.isEdit\r\n  //         ? getSpecificBranchByKey(props.GenKey)\r\n  //         : defaultBranch;\r\n  //       break;\r\n  //     case \"Employee\":\r\n  //       Data = props.isEdit\r\n  //         ? getSpecificEmployeeByKey(props.GenKey)\r\n  //         : defaultEmployee;\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  //}\r\n\r\n  useEffect(() => {\r\n    // async function GetTreeData() {\r\n    //   const url = `https://localhost:5001/api/tree?code=${props.GenKey}&type=${\r\n    //     props.type === \"Branch\" ? 0 : 1\r\n    //   }`;\r\n    //   let obj = [];\r\n    //   let objDta = [];\r\n    //   await fetch(url, {\r\n    //     method: \"GET\",\r\n    //     headers: new Headers({\r\n    //       Accept: \"application/vnd.github.cloak-preview\"\r\n    //     })\r\n    //   })\r\n    //     .then(res => res.json())\r\n    //     .then(response => {\r\n    //       console.log(response);\r\n    //       response.map(Main => {\r\n    //         objDta.push({\r\n    //           name: Main.name,\r\n    //           value: Main.value\r\n    //         });\r\n    //         // title: Main.data[0].value,\r\n    //         // key: Main.data[1].value,\r\n    //         // isLeaf: Main.data[2].value === \"0\" ? false : true\r\n    //         obj.push({ key: Main.key, Data: objDta });\r\n    //       });\r\n    //       setData(obj);\r\n    //       data[0].data.map(x =>\r\n    //         form.setFieldsValue({\r\n    //           [x.name]: x.value\r\n    //         })\r\n    //       );\r\n    //     })\r\n    //     .catch(error => {\r\n    //       console.log(error);\r\n    //     });\r\n    // }\r\n    // GetTreeData();\r\n  }, []);\r\n  return (\r\n    <Layout>\r\n      {data.map(memes => {\r\n        return (\r\n          <>\r\n            <h2>\r\n              {props.isEdit\r\n                ? `Editing for ${props.GenKey}`\r\n                : `Adding new ${props.type} for ${props.Genkey}`}\r\n            </h2>\r\n            <Form\r\n              form={form}\r\n              {...layout}\r\n              name=\"nest-messages\"\r\n              onFinish={onFinish}\r\n              validateMessages={validateMessages}\r\n            >\r\n              {memes.data.map(field => {\r\n                return Array.isArray(field.value) ? (\r\n                  <div>\r\n                    {field.name}\r\n                    <Select name={field.name} style={{ width: \"65%\" }}>\r\n                      {field.value.map(option => {\r\n                        return (\r\n                          <Option value={option.value}>{option.value}</Option>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </div>\r\n                ) : (\r\n                  <Form.Item label={field.name} name={field.name}>\r\n                    <Input label={field.name} />\r\n                  </Form.Item>\r\n                );\r\n              })}\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </>\r\n        );\r\n      })}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nGeneralDisplayPage.propTypes = {\r\n  GenKey: PropTypes.string.isRequired,\r\n  isEdit: PropTypes.bool.isRequired,\r\n  type: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GeneralDisplayPage;\r\n"]},"metadata":{},"sourceType":"module"}