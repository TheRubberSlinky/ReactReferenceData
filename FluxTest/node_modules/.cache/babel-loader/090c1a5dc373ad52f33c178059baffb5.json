{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useState } from 'react';\nimport { Tree } from 'antd';\nimport PropTypes from \"prop-types\";\nimport 'antd/dist/antd.css';\nimport { GetTreeData, GetTreeChildren } from './MockData';\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction GetChildNodes(ParentKey) {\n  let children = GetTreeChildren(ParentKey);\n  return children;\n}\n\nexport function Demo(props) {\n  const _useState = useState(GetTreeData()),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\n      resolve();\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Tree, {\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Form, {\n    name: \"customized_form_controls\",\n    layout: \"inline\",\n    onFinish: onFinish,\n    initialValues: {\n      price: {\n        number: 0,\n        currency: 'rmb'\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Form.Item, {\n    name: \"price\",\n    label: \"Price\",\n    rules: [{\n      validator: checkPrice\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(PriceInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Submit\"))), React.createElement(\"button\", {\n    onClick: props.myClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n}\n;\nDemo.propTypes = {\n  mySelect: PropTypes.func.isRequired,\n  myClick: PropTypes.func.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useState","Tree","PropTypes","GetTreeData","GetTreeChildren","updateTreeData","list","key","children","map","node","GetChildNodes","ParentKey","Demo","props","treeData","setTreeData","onLoadData","Promise","resolve","origin","mySelect","onFinish","price","number","currency","validator","checkPrice","myClick","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Tree } from 'antd';\r\nimport PropTypes from \"prop-types\";\r\nimport 'antd/dist/antd.css';\r\nimport { GetTreeData, GetTreeChildren} from './MockData'\r\n\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return { ...node, children: updateTreeData(node.children, key, children) };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\nfunction GetChildNodes(ParentKey){\r\n  let children = GetTreeChildren(ParentKey);\r\n  return children;\r\n}\r\n\r\n export function Demo(props)  {\r\n  const [treeData, setTreeData] = useState(GetTreeData());\r\n\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n        setTreeData(origin =>\r\n          updateTreeData(origin, key, GetChildNodes(key)),\r\n        );\r\n        resolve();\r\n    });\r\n  }\r\n\r\n  return (<><Tree loadData={onLoadData} onSelect={props.mySelect} treeData={treeData} />\r\n      <Form\r\n      name=\"customized_form_controls\"\r\n      layout=\"inline\"\r\n      onFinish={onFinish}\r\n      initialValues={{\r\n        price: {\r\n          number: 0,\r\n          currency: 'rmb',\r\n        },\r\n      }}\r\n    >\r\n      <Form.Item\r\n        name=\"price\"\r\n        label=\"Price\"\r\n        rules={[\r\n          {\r\n            validator: checkPrice,\r\n          },\r\n        ]}\r\n      >\r\n        <PriceInput />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n          <button onClick = {props.myClick}></button>\r\n          </>);\r\n};\r\n\r\nDemo.propTypes = {\r\n  mySelect: PropTypes.func.isRequired,\r\n  myClick: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}