{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useState } from 'react';\nimport { Tree } from 'antd';\nconst TreeNode = Tree.TreeNode;\nconst initTreeDate = [{\n  title: 'Expand to load',\n  key: '0'\n}, {\n  title: 'Expand to load',\n  key: '1'\n}, {\n  title: 'Tree Node',\n  key: '2',\n  isLeaf: true\n}]; // It's just a simple demo. You can use tree map to optimize update perf.\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nconst Demo = () => {\n  const _useState = useState(initTreeDate),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTimeout(() => {\n        setTreeData(origin => updateTreeData(origin, key, [{\n          title: 'Child Node',\n          key: \"\".concat(key, \"-0\")\n        }, {\n          title: 'Child Node',\n          key: \"\".concat(key, \"-1\")\n        }]));\n        resolve();\n      }, 1000);\n    });\n  }\n\n  return React.createElement(Tree, {\n    loadData: onLoadData,\n    treeData: treeData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n};\n\nclass Demo1 extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      treeData: [{\n        title: 'Expand to load',\n        key: '0'\n      }, {\n        title: 'Expand to load',\n        key: '1'\n      }, {\n        title: 'Tree Node',\n        key: '2',\n        isLeaf: true\n      }]\n    };\n\n    this.onLoadData = treeNode => {\n      const treeData = this.state.treeData;\n      return new Promise(resolve => {\n        const props = treeNode.props;\n\n        if (treeNode.children) {\n          resolve();\n          return;\n        }\n\n        setTimeout(() => {\n          treeNode.children = [{\n            title: 'Child Node',\n            key: \"\".concat(treeNode.eventKey, \"-0\")\n          }, {\n            title: 'Child Node',\n            key: \"\".concat(treeNode.eventKey, \"-1\")\n          }];\n          this.setState({\n            treeData: [...this.state.treeData]\n          });\n          resolve();\n        }, 1000);\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Tree, {\n      loadData: this.onLoadData,\n      treeData: this.state.treeData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Demo;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useState","Tree","TreeNode","initTreeDate","title","key","isLeaf","updateTreeData","list","children","map","node","Demo","treeData","setTreeData","onLoadData","Promise","resolve","setTimeout","origin","Demo1","Component","state","treeNode","props","eventKey","setState","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,MAArB;MAEQC,Q,GAAaD,I,CAAbC,Q;AACR,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,GAAG,EAAE;AAFP,CADmB,EAKnB;AACED,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,GAAG,EAAE;AAFP,CALmB,EASnB;AACED,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,GAAG,EAAE,GAFP;AAGEC,EAAAA,MAAM,EAAE;AAHV,CATmB,CAArB,C,CAcG;;AAEH,SAASC,cAAT,CAAwBC,IAAxB,EAA8BH,GAA9B,EAAmCI,QAAnC,EAA6C;AAC3C,SAAOD,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AACtB,QAAIA,IAAI,CAACN,GAAL,KAAaA,GAAjB,EAAsB;AACpB,+BAAYM,IAAZ;AAAkBF,QAAAA;AAAlB;AACD;;AACD,QAAIE,IAAI,CAACF,QAAT,EAAmB;AACjB,+BAAYE,IAAZ;AAAkBF,QAAAA,QAAQ,EAAEF,cAAc,CAACI,IAAI,CAACF,QAAN,EAAgBJ,GAAhB,EAAqBI,QAArB;AAA1C;AACD;;AAED,WAAOE,IAAP;AACD,GATM,CAAP;AAUD;;AAED,MAAMC,IAAI,GAAG,MAAM;AAAA,oBACeZ,QAAQ,CAACG,YAAD,CADvB;AAAA;AAAA,QACVU,QADU;AAAA,QACAC,WADA;;AAGjB,WAASC,UAAT,CAAoB;AAAEV,IAAAA,GAAF;AAAOI,IAAAA;AAAP,GAApB,EAAuC;AACrC,WAAO,IAAIO,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAIR,QAAJ,EAAc;AACZQ,QAAAA,OAAO;AACP;AACD;;AAEDC,MAAAA,UAAU,CAAC,MAAM;AACfJ,QAAAA,WAAW,CAACK,MAAM,IAChBZ,cAAc,CAACY,MAAD,EAASd,GAAT,EAAc,CAC1B;AACED,UAAAA,KAAK,EAAE,YADT;AAEEC,UAAAA,GAAG,YAAKA,GAAL;AAFL,SAD0B,EAK1B;AACED,UAAAA,KAAK,EAAE,YADT;AAEEC,UAAAA,GAAG,YAAKA,GAAL;AAFL,SAL0B,CAAd,CADL,CAAX;AAYAY,QAAAA,OAAO;AACR,OAdS,EAcP,IAdO,CAAV;AAeD,KArBM,CAAP;AAsBD;;AAED,SAAO,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,UAAhB;AAA4B,IAAA,QAAQ,EAAEF,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA7BD;;AA+BA,MAAMO,KAAN,SAAoBrB,KAAK,CAACsB,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCC,KADkC,GAC1B;AACNT,MAAAA,QAAQ,EAAE,CACR;AACET,QAAAA,KAAK,EAAE,gBADT;AAEEC,QAAAA,GAAG,EAAE;AAFP,OADQ,EAKR;AACED,QAAAA,KAAK,EAAE,gBADT;AAEEC,QAAAA,GAAG,EAAE;AAFP,OALQ,EASR;AACED,QAAAA,KAAK,EAAE,WADT;AAEEC,QAAAA,GAAG,EAAE,GAFP;AAGEC,QAAAA,MAAM,EAAE;AAHV,OATQ;AADJ,KAD0B;;AAAA,SAmBlCS,UAnBkC,GAmBrBQ,QAAQ,IAAI;AAAA,YACfV,QADe,GACF,KAAKS,KADH,CACfT,QADe;AAEvB,aAAO,IAAIG,OAAJ,CAAYC,OAAO,IAAI;AAAA,cACpBO,KADoB,GACVD,QADU,CACpBC,KADoB;;AAG5B,YAAID,QAAQ,CAACd,QAAb,EAAuB;AACrBQ,UAAAA,OAAO;AACP;AACD;;AAEDC,QAAAA,UAAU,CAAC,MAAM;AACfK,UAAAA,QAAQ,CAACd,QAAT,GAAoB,CAClB;AACEL,YAAAA,KAAK,EAAE,YADT;AAEEC,YAAAA,GAAG,YAAKkB,QAAQ,CAACE,QAAd;AAFL,WADkB,EAKlB;AACErB,YAAAA,KAAK,EAAE,YADT;AAEEC,YAAAA,GAAG,YAAKkB,QAAQ,CAACE,QAAd;AAFL,WALkB,CAApB;AAUA,eAAKC,QAAL,CAAc;AACZb,YAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKS,KAAL,CAAWT,QAAf;AADE,WAAd;AAGAI,UAAAA,OAAO;AACR,SAfS,EAeP,IAfO,CAAV;AAgBD,OAxBM,CAAP;AAyBD,KA9CiC;AAAA;;AAgDlCU,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKZ,UAArB;AAAiC,MAAA,QAAQ,EAAE,KAAKO,KAAL,CAAWT,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAlDiC;;AAqDpC,eAAeD,IAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Tree } from 'antd';\r\n\r\nconst { TreeNode } = Tree;\r\nconst initTreeDate = [\r\n  {\r\n    title: 'Expand to load',\r\n    key: '0',\r\n  },\r\n  {\r\n    title: 'Expand to load',\r\n    key: '1',\r\n  },\r\n  {\r\n    title: 'Tree Node',\r\n    key: '2',\r\n    isLeaf: true,\r\n  },\r\n]; // It's just a simple demo. You can use tree map to optimize update perf.\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return { ...node, children: updateTreeData(node.children, key, children) };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\n\r\nconst Demo = () => {\r\n  const [treeData, setTreeData] = useState(initTreeDate);\r\n\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setTreeData(origin =>\r\n          updateTreeData(origin, key, [\r\n            {\r\n              title: 'Child Node',\r\n              key: `${key}-0`,\r\n            },\r\n            {\r\n              title: 'Child Node',\r\n              key: `${key}-1`,\r\n            },\r\n          ]),\r\n        );\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  return <Tree loadData={onLoadData} treeData={treeData} />;\r\n};\r\n\r\nclass Demo1 extends React.Component {\r\n  state = {\r\n    treeData: [\r\n      {\r\n        title: 'Expand to load',\r\n        key: '0',\r\n      },\r\n      {\r\n        title: 'Expand to load',\r\n        key: '1',\r\n      },\r\n      {\r\n        title: 'Tree Node',\r\n        key: '2',\r\n        isLeaf: true,\r\n      },\r\n    ],\r\n  };\r\n\r\n  onLoadData = treeNode => {\r\n    const { treeData } = this.state;\r\n    return new Promise(resolve => {\r\n      const { props } = treeNode;\r\n\r\n      if (treeNode.children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        treeNode.children = [\r\n          {\r\n            title: 'Child Node',\r\n            key: `${treeNode.eventKey}-0`,\r\n          },\r\n          {\r\n            title: 'Child Node',\r\n            key: `${treeNode.eventKey}-1`,\r\n          },\r\n        ];\r\n        this.setState({\r\n          treeData: [...this.state.treeData],\r\n        });\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <Tree loadData={this.onLoadData} treeData={this.state.treeData} />;\r\n  }\r\n}\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}