{"ast":null,"code":"var _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\TreeSearch.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\"; //constants\n\nconst Search = Input.Search;\nexport function TreeSearch(props) {\n  //async function to search the tree\n  async function treeSearch(e) {\n    if (e != \"\") {\n      const url = \"\".concat(props.searchURLCall).concat(e);\n      let obj = [];\n      const response = await fetch(url, {\n        method: \"GET\"\n      });\n      const json = await response.json();\n      json.map(Main => {\n        obj.push({\n          title: Main.data[2].value,\n          key: Main.data[1].value,\n          icon: Main.data[3].value === \"0\" ? React.createElement(HomeOutlined, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }) : React.createElement(UserOutlined, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }),\n          isLeaf: Main.data[3].value === \"0\" ? false : true\n        });\n      });\n      props.UpdateTree(obj);\n    } else {\n      props.UpdateTree();\n    } //search and then update the hook for the rootbranch\n    //disable loading icon\n\n  }\n\n  return React.createElement(Search, {\n    placeholder: \"search...\",\n    enterButton: \"Search\",\n    size: \"medium\",\n    onSearch: treeSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n}\nTreeSearch.propTypes = {\n  UpdateTree: PropTypes.func.isRequired,\n  searchURLCall: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\TreeSearch.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","Search","TreeSearch","props","treeSearch","e","url","searchURLCall","obj","response","fetch","method","json","map","Main","push","title","data","value","key","icon","isLeaf","UpdateTree","propTypes","func","isRequired","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,KAA7C,QAA0D,MAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,mBAA3C,C,CAEA;;AACA,MAAMC,MAAM,GAAGJ,KAAK,CAACI,MAArB;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAChC;AACA,iBAAeC,UAAf,CAA0BC,CAA1B,EAA6B;AAC3B,QAAIA,CAAC,IAAI,EAAT,EAAa;AACX,YAAMC,GAAG,aAAMH,KAAK,CAACI,aAAZ,SAA4BF,CAA5B,CAAT;AACA,UAAIG,GAAG,GAAG,EAAV;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AAChCK,QAAAA,MAAM,EAAE;AADwB,OAAN,CAA5B;AAGA,YAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACAA,MAAAA,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAU;AACjBN,QAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,UAAAA,KAAK,EAAEF,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KADb;AAEPC,UAAAA,GAAG,EAAEL,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KAFX;AAGPE,UAAAA,IAAI,EACFN,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KAAb,KAAuB,GAAvB,GAA6B,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA7B,GAAgD,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJ3C;AAKPG,UAAAA,MAAM,EAAEP,IAAI,CAACG,IAAL,CAAU,CAAV,EAAaC,KAAb,KAAuB,GAAvB,GAA6B,KAA7B,GAAqC;AALtC,SAAT;AAOD,OARD;AASAf,MAAAA,KAAK,CAACmB,UAAN,CAAiBd,GAAjB;AACD,KAjBD,MAiBO;AACLL,MAAAA,KAAK,CAACmB,UAAN;AACD,KApB0B,CAqB3B;AACA;;AACD;;AAED,SACE,oBAAC,MAAD;AACE,IAAA,WAAW,EAAC,WADd;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,QAAQ,EAAElB,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD;AACDF,UAAU,CAACqB,SAAX,GAAuB;AACrBD,EAAAA,UAAU,EAAExB,SAAS,CAAC0B,IAAV,CAAeC,UADN;AAErBlB,EAAAA,aAAa,EAAET,SAAS,CAAC4B,MAAV,CAAiBD;AAFX,CAAvB","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\n\r\n//constants\r\nconst Search = Input.Search;\r\n\r\nexport function TreeSearch(props) {\r\n  //async function to search the tree\r\n  async function treeSearch(e) {\r\n    if (e != \"\") {\r\n      const url = `${props.searchURLCall}${e}`;\r\n      let obj = [];\r\n      const response = await fetch(url, {\r\n        method: \"GET\",\r\n      });\r\n      const json = await response.json();\r\n      json.map((Main) => {\r\n        obj.push({\r\n          title: Main.data[2].value,\r\n          key: Main.data[1].value,\r\n          icon:\r\n            Main.data[3].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\r\n          isLeaf: Main.data[3].value === \"0\" ? false : true,\r\n        });\r\n      });\r\n      props.UpdateTree(obj);\r\n    } else {\r\n      props.UpdateTree();\r\n    }\r\n    //search and then update the hook for the rootbranch\r\n    //disable loading icon\r\n  }\r\n\r\n  return (\r\n    <Search\r\n      placeholder=\"search...\"\r\n      enterButton=\"Search\"\r\n      size=\"medium\"\r\n      onSearch={treeSearch}\r\n    />\r\n  );\r\n}\r\nTreeSearch.propTypes = {\r\n  UpdateTree: PropTypes.func.isRequired,\r\n  searchURLCall: PropTypes.string.isRequired,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}