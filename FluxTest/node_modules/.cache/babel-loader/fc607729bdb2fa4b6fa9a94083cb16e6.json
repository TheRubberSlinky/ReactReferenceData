{"ast":null,"code":"import _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useState } from \"react\";\nimport { Tree, Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\nimport { popup } from \"./popup\";\n\nfunction menu() {\n  const _useState = useState({\n    pageX: \"\",\n    pageY: \"\",\n    id: \"\",\n    categoryName: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        rightClickNodeTreeItem = _useState2[0],\n        setrightClickNodeTreeItem = _useState2[1];\n\n  const onRightClick = e => {\n    setrightClickNodeTreeItem({\n      pageX: e.event.pageX,\n      pageY: e.event.pageY,\n      id: e.node.props[\"data-key\"],\n      categoryName: e.node.props[\"data-title\"]\n    });\n  };\n\n  const _rightClickNodeTreeIt = _objectSpread({}, rightClickNodeTreeItem),\n        pageX = _rightClickNodeTreeIt.pageX,\n        pageY = _rightClickNodeTreeIt.pageY,\n        id = _rightClickNodeTreeIt.id,\n        categoryName = _rightClickNodeTreeIt.categoryName;\n\n  const tmpStyle = {\n    position: \"absolute\",\n    left: \"\".concat(pageX - 220, \"px\"),\n    top: \"\".concat(pageY - 102, \"px\")\n  };\n  const menu = React.createElement(\"div\", {\n    style: tmpStyle,\n    className: \"self-right-menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \" new lower sector \"), React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \" modify \"), React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \" delete the directory \"));\n}\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction GetChildNodes(ParentKey) {\n  let children = GetTreeChildren(ParentKey);\n  return children;\n}\n\nexport function Demo(props) {\n  const _useState3 = useState(GetTreeData()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        treeData = _useState4[0],\n        setTreeData = _useState4[1];\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\n      resolve();\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Tree, {\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    onRightClick: onRightClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"menu\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"primary\",\n    onClick: () => props.myClick(\"Branch\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Add new Branch\"), React.createElement(Button, {\n    type: \"primary\",\n    onClick: props.myClick,\n    value: \"Employee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Add new Employee\"));\n} //TODO: move the keys away from a delimited string\n//      add popup instead of buttons to add\n\nDemo.propTypes = {\n  mySelect: PropTypes.func.isRequired,\n  myClick: PropTypes.func.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useState","Tree","Button","PropTypes","GetTreeData","GetTreeChildren","popup","menu","pageX","pageY","id","categoryName","rightClickNodeTreeItem","setrightClickNodeTreeItem","onRightClick","e","event","node","props","tmpStyle","position","left","top","updateTreeData","list","key","children","map","GetChildNodes","ParentKey","Demo","treeData","setTreeData","onLoadData","Promise","resolve","origin","mySelect","myClick","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Tree, Button } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { popup } from \"./popup\";\r\n\r\nfunction menu() {\r\n  const [rightClickNodeTreeItem, setrightClickNodeTreeItem] = useState({\r\n    pageX: \"\",\r\n    pageY: \"\",\r\n    id: \"\",\r\n    categoryName: \"\"\r\n  });\r\n  const onRightClick = e => {\r\n    setrightClickNodeTreeItem({\r\n      pageX: e.event.pageX,\r\n      pageY: e.event.pageY,\r\n      id: e.node.props[\"data-key\"],\r\n      categoryName: e.node.props[\"data-title\"]\r\n    });\r\n  };\r\n  const { pageX, pageY, id, categoryName } = {\r\n    ...rightClickNodeTreeItem\r\n  };\r\n  const tmpStyle = {\r\n    position: \"absolute\",\r\n    left: `${pageX - 220}px`,\r\n    top: `${pageY - 102}px`\r\n  };\r\n  const menu = (\r\n    <div style={tmpStyle} className=\"self-right-menu\">\r\n      <a> new lower sector </a>\r\n      <a> modify </a>\r\n      <a> delete the directory </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return {\r\n        ...node,\r\n        children: updateTreeData(node.children, key, children)\r\n      };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\nfunction GetChildNodes(ParentKey) {\r\n  let children = GetTreeChildren(ParentKey);\r\n  return children;\r\n}\r\n\r\nexport function Demo(props) {\r\n  const [treeData, setTreeData] = useState(GetTreeData());\r\n\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Tree\r\n        loadData={onLoadData}\r\n        onSelect={props.mySelect}\r\n        treeData={treeData}\r\n        onRightClick={onRightClick}\r\n      />\r\n      <menu />\r\n      <Button type=\"primary\" onClick={() => props.myClick(\"Branch\")}>\r\n        Add new Branch\r\n      </Button>\r\n      <Button type=\"primary\" onClick={props.myClick} value=\"Employee\">\r\n        Add new Employee\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n//TODO: move the keys away from a delimited string\r\n//      add popup instead of buttons to add\r\nDemo.propTypes = {\r\n  mySelect: PropTypes.func.isRequired,\r\n  myClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Demo;\r\n"]},"metadata":{},"sourceType":"module"}