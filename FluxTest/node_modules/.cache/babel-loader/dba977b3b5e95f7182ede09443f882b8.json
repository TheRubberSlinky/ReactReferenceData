{"ast":null,"code":"import _objectSpread from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\AsyncTree.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\nconst rootURLCall = \"https://localhost:5001/api/trees\";\nconst childURLCall = \"https://localhost:5001/api/trees/\";\nexport function BranchTree(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        RCData = _useState4[0],\n        setRCData = _useState4[1];\n\n  function updateTreeData(list, key, children) {\n    return list.map(node => {\n      if (node.key === key) {\n        return _objectSpread({}, node, {\n          children\n        });\n      }\n\n      if (node.children) {\n        return _objectSpread({}, node, {\n          children: updateTreeData(node.children, key, children)\n        });\n      }\n\n      return node;\n    });\n  }\n\n  async function GetChildNodes(ParentKey) {\n    const url = \"\".concat(childURLCall).concat(ParentKey);\n    let obj = [];\n    const response = await fetch(url, {\n      method: \"GET\"\n    });\n    const json = await response.json();\n    console.log(GetTreeChildren(ParentKey));\n    console.log(response);\n    json.map(Main => {\n      obj.push({\n        title: Main.data[2].value,\n        key: Main.data[1].value,\n        isLeaf: Main.data[3].value === \"0\" ? false : true\n      });\n    });\n    let children = obj; //GetTreeChildren(ParentKey);\n\n    return children;\n  }\n\n  useEffect(() => {\n    let obj = [];\n    fetch(rootURLCall, {\n      method: \"GET\",\n      headers: new Headers({\n        Accept: \"application/vnd.github.cloak-preview\"\n      })\n    }).then(res => res.json()).then(response => {\n      //console.log(response);\n      response.map(Main => {\n        obj.push({\n          title: Main.data[0].value,\n          key: Main.data[1].value,\n          isLeaf: Main.data[2].value === \"0\" ? false : true\n        });\n      });\n      setTreeData(obj);\n    }).catch(error => {\n      console.log(error);\n      return obj;\n    });\n    if (treeData) setTreeData(GetTreeData()); //if (treeData) setTreeData(fetchData());\n    //DataTree = fetchData();\n  }, []);\n  const layout = {\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16\n    }\n  };\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      const childNodes = GetChildNodes(key);\n      setTimeout(() => {\n        setTreeData(origin => updateTreeData(origin, key, childNodes));\n        resolve();\n      }, 1000);\n    });\n  }\n\n  const menu = React.createElement(Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, !RCData.isLeaf ? React.createElement(Menu.Item, {\n    key: \"1\",\n    onClick: () => props.myClick(\"Branch\", RCData.key),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Add new Branch\") : \"\", !RCData.isLeaf ? React.createElement(Menu.Item, {\n    key: \"2\",\n    onClick: () => props.myClick(\"Employee\", RCData.key),\n    value: \"Employee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Add new Employee\") : \"\"); //on right click, open a dropdown at that location\n\n  const onRightClick = event => {\n    setRCData(event.node);\n    console.log(event);\n  };\n\n  const onDragEnter = info => {\n    console.log(info);\n  }; //on drop, make a popup ask if they are sure they want to move X to Y\n\n\n  const onDrop = info => {\n    if (!window.confirm(\"Are you sure you wish to move \".concat(info.dragNode.title, \" into \").concat(info.node.title))) return;\n    console.log(info);\n    console.log(\"DragNode: \".concat(info.dragNode.title, \"   Node: \").concat(info.node.title));\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split(\"-\");\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n\n    const data = [...treeData]; // Find dragObject\n\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (!info.dropToGap) {\n      // Drop on the content\n      loop(data, dropKey, item => {\n        item.children = item.children || []; // where to insert\n\n        item.children.push(dragObj);\n      });\n    } else if ((info.node.props.children || []).length > 0 && // Has children\n    info.node.props.expanded && // Is expanded\n    dropPosition === 1 // On the bottom gap\n    ) {\n        loop(data, dropKey, item => {\n          item.children = item.children || []; // where to insert\n\n          item.children.unshift(dragObj);\n        });\n      } else {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    } //update actual system as well, if it works then set the tree data\n\n\n    setTreeData(data);\n  };\n\n  return React.createElement(Dropdown, {\n    overlay: menu,\n    trigger: [\"contextMenu\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(Tree, Object.assign({}, layout, {\n    style: {\n      height: \"auto\",\n      minHeight: \"570px\"\n    },\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    draggable: true,\n    onDragEnter: onDragEnter,\n    onDrop: onDrop,\n    onRightClick: onRightClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }))));\n}\nBranchTree.propTypes = {\n  rootBranch: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired,\n  isBranch: PropTypes.bool,\n  //leave for now\n  form: PropTypes.bool //leave for now\n\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\AsyncTree.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Input","PropTypes","GetTreeData","GetTreeChildren","rootURLCall","childURLCall","BranchTree","props","treeData","setTreeData","RCData","setRCData","updateTreeData","list","key","children","map","node","GetChildNodes","ParentKey","url","obj","response","fetch","method","json","console","log","Main","push","title","data","value","isLeaf","headers","Headers","Accept","then","res","catch","error","layout","labelCol","span","wrapperCol","tailLayout","offset","onLoadData","Promise","resolve","childNodes","setTimeout","origin","menu","myClick","onRightClick","event","onDragEnter","info","onDrop","window","confirm","dragNode","dropKey","eventKey","dragKey","dropPos","pos","split","dropPosition","Number","length","loop","callback","forEach","item","index","arr","dragObj","splice","dropToGap","expanded","unshift","ar","i","height","minHeight","mySelect","propTypes","rootBranch","string","isRequired","onSelect","func","isBranch","bool","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\r\n\r\nconst rootURLCall = \"https://localhost:5001/api/trees\";\r\nconst childURLCall = \"https://localhost:5001/api/trees/\";\r\n\r\nexport function BranchTree(props) {\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [RCData, setRCData] = useState([]);\r\n\r\n  function updateTreeData(list, key, children) {\r\n    return list.map((node) => {\r\n      if (node.key === key) {\r\n        return { ...node, children };\r\n      }\r\n      if (node.children) {\r\n        return {\r\n          ...node,\r\n          children: updateTreeData(node.children, key, children),\r\n        };\r\n      }\r\n      return node;\r\n    });\r\n  }\r\n  async function GetChildNodes(ParentKey) {\r\n    const url = `${childURLCall}${ParentKey}`;\r\n    let obj = [];\r\n    const response = await fetch(url, {\r\n      method: \"GET\",\r\n    });\r\n    const json = await response.json();\r\n    console.log(GetTreeChildren(ParentKey));\r\n    console.log(response);\r\n    json.map((Main) => {\r\n      obj.push({\r\n        title: Main.data[2].value,\r\n        key: Main.data[1].value,\r\n        isLeaf: Main.data[3].value === \"0\" ? false : true,\r\n      });\r\n    });\r\n    let children = obj; //GetTreeChildren(ParentKey);\r\n    return children;\r\n  }\r\n\r\n  useEffect(() => {\r\n    let obj = [];\r\n    fetch(rootURLCall, {\r\n      method: \"GET\",\r\n      headers: new Headers({\r\n        Accept: \"application/vnd.github.cloak-preview\",\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        //console.log(response);\r\n        response.map((Main) => {\r\n          obj.push({\r\n            title: Main.data[0].value,\r\n            key: Main.data[1].value,\r\n            isLeaf: Main.data[2].value === \"0\" ? false : true,\r\n          });\r\n        });\r\n        setTreeData(obj);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        return obj;\r\n      });\r\n    if (treeData) setTreeData(GetTreeData());\r\n    //if (treeData) setTreeData(fetchData());\r\n    //DataTree = fetchData();\r\n  }, []);\r\n  const layout = {\r\n    labelCol: {\r\n      span: 8,\r\n    },\r\n    wrapperCol: {\r\n      span: 16,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 8,\r\n      span: 16,\r\n    },\r\n  };\r\n  function onLoadData({ key, children }) {\r\n    return new Promise((resolve) => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n      const childNodes = GetChildNodes(key);\r\n      setTimeout(() => {\r\n        setTreeData((origin) => updateTreeData(origin, key, childNodes));\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n  }\r\n  const menu = (\r\n    <Menu>\r\n      {/* see if it is a branch, if it is, allow add new branch and add new employee */}\r\n      {!RCData.isLeaf ? (\r\n        <Menu.Item key=\"1\" onClick={() => props.myClick(\"Branch\", RCData.key)}>\r\n          Add new Branch\r\n        </Menu.Item>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {!RCData.isLeaf ? (\r\n        <Menu.Item\r\n          key=\"2\"\r\n          onClick={() => props.myClick(\"Employee\", RCData.key)}\r\n          value=\"Employee\"\r\n        >\r\n          Add new Employee\r\n        </Menu.Item>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n  //on right click, open a dropdown at that location\r\n  const onRightClick = (event) => {\r\n    setRCData(event.node);\r\n    console.log(event);\r\n  };\r\n\r\n  const onDragEnter = (info) => {\r\n    console.log(info);\r\n  };\r\n  //on drop, make a popup ask if they are sure they want to move X to Y\r\n  const onDrop = (info) => {\r\n    if (\r\n      !window.confirm(\r\n        `Are you sure you wish to move ${info.dragNode.title} into ${info.node.title}`\r\n      )\r\n    )\r\n      return;\r\n    console.log(info);\r\n    console.log(`DragNode: ${info.dragNode.title}   Node: ${info.node.title}`);\r\n    const dropKey = info.node.props.eventKey;\r\n    const dragKey = info.dragNode.props.eventKey;\r\n    const dropPos = info.node.props.pos.split(\"-\");\r\n    const dropPosition =\r\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n\r\n    const loop = (data, key, callback) => {\r\n      data.forEach((item, index, arr) => {\r\n        if (item.key === key) {\r\n          return callback(item, index, arr);\r\n        }\r\n        if (item.children) {\r\n          return loop(item.children, key, callback);\r\n        }\r\n      });\r\n    };\r\n    const data = [...treeData];\r\n\r\n    // Find dragObject\r\n    let dragObj;\r\n    loop(data, dragKey, (item, index, arr) => {\r\n      arr.splice(index, 1);\r\n      dragObj = item;\r\n    });\r\n\r\n    if (!info.dropToGap) {\r\n      // Drop on the content\r\n      loop(data, dropKey, (item) => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.push(dragObj);\r\n      });\r\n    } else if (\r\n      (info.node.props.children || []).length > 0 && // Has children\r\n      info.node.props.expanded && // Is expanded\r\n      dropPosition === 1 // On the bottom gap\r\n    ) {\r\n      loop(data, dropKey, (item) => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.unshift(dragObj);\r\n      });\r\n    } else {\r\n      let ar;\r\n      let i;\r\n      loop(data, dropKey, (item, index, arr) => {\r\n        ar = arr;\r\n        i = index;\r\n      });\r\n      if (dropPosition === -1) {\r\n        ar.splice(i, 0, dragObj);\r\n      } else {\r\n        ar.splice(i + 1, 0, dragObj);\r\n      }\r\n    }\r\n    //update actual system as well, if it works then set the tree data\r\n    setTreeData(data);\r\n  };\r\n\r\n  return (\r\n    <Dropdown overlay={menu} trigger={[\"contextMenu\"]}>\r\n      <div>\r\n        <Tree\r\n          {...layout}\r\n          style={{ height: \"auto\", minHeight: \"570px\" }}\r\n          loadData={onLoadData}\r\n          onSelect={props.mySelect}\r\n          treeData={treeData}\r\n          draggable\r\n          onDragEnter={onDragEnter}\r\n          onDrop={onDrop}\r\n          onRightClick={onRightClick}\r\n        />\r\n      </div>\r\n    </Dropdown>\r\n  );\r\n}\r\nBranchTree.propTypes = {\r\n  rootBranch: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onRightClick: PropTypes.func.isRequired,\r\n  isBranch: PropTypes.bool, //leave for now\r\n  form: PropTypes.bool, //leave for now\r\n};\r\n"]},"metadata":{},"sourceType":"module"}