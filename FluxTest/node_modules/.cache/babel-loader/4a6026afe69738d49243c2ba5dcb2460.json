{"ast":null,"code":"import _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { Tree, Button, Popover, Form } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\nimport axios from \"axios\"; //import { onRightClick } from \"./popup\";\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction GetChildNodes(ParentKey) {\n  let children = GetTreeChildren(ParentKey);\n  return children;\n}\n\nexport function Demo(props) {\n  const _useState = useState(GetTreeData),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const url = \"https://localhost:5001/api/trees\";\n  let DataTree = [];\n  useEffect(() => {// async function fetchData() {\n    //   debugger;\n    //   let obj = [];\n    //   const response = await fetch(url);\n    // axios\n    //   .get(url)\n    //   .then(response => {\n    //     console.log(response);\n    //     response.data.map(Main => {\n    //       obj.push({\n    //         title: Main.data[0].value,\n    //         key: Main.data[1].value,\n    //         isLeaf: Main.data[2].value\n    //       });\n    //     });\n    //   })\n    //   .catch(error => {\n    //     console.log(error);\n    // //   });\n    // response.data.map(Main => {\n    //   obj.push({\n    //     title: Main.data[0].value,\n    //     key: Main.data[1].value,\n    //     isLeaf: Main.data[2].value\n    //   });\n    // });\n    // return obj;\n    // }\n    //setTreeData(fetchData());\n    //DataTree = fetchData();\n  });\n  const layout = {\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16\n    }\n  };\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\n      resolve();\n    });\n  }\n\n  const onDragEnter = info => {\n    console.log(info); // expandedKeys 需要受控时设置\n    // this.setState({\n    //   expandedKeys: info.expandedKeys,\n    // });\n  }; //on right click, open a dropdown at that location\n\n\n  const onRightClick = event => {\n    console.log(event);\n  }; //on drop, make a popup ask if they are sure they want to move X to Y\n\n\n  const onDrop = info => {\n    if (!window.confirm(\"Are you sure you wish to move \".concat(info.dragNode.title, \" into \").concat(info.node.title))) return;\n    console.log(info);\n    console.log(\"DragNode: \".concat(info.dragNode.title, \"   Node: \").concat(info.node.title));\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split(\"-\");\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n\n    const data = [...treeData]; // Find dragObject\n\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (!info.dropToGap) {\n      // Drop on the content\n      loop(data, dropKey, item => {\n        item.children = item.children || []; // where to insert\n\n        item.children.push(dragObj);\n      });\n    } else if ((info.node.props.children || []).length > 0 && // Has children\n    info.node.props.expanded && // Is expanded\n    dropPosition === 1 // On the bottom gap\n    ) {\n        loop(data, dropKey, item => {\n          item.children = item.children || []; // where to insert\n\n          item.children.unshift(dragObj);\n        });\n      } else {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    } //update actual system as well, if it works then set the tree data\n\n\n    setTreeData(data);\n  }; // const onSelect = (selectedKeys, otherValue) => {\n  //   debugger;\n  //   console.log(selectedKeys);\n  //   console.log(otherValue);\n  // };\n\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Tree, Object.assign({}, layout, {\n    style: {\n      height: \"auto\",\n      minHeight: \"570px\"\n    },\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    draggable: true,\n    onDragEnter: onDragEnter,\n    onDrop: onDrop,\n    onRightClick: onRightClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    onClick: () => props.myClick(\"Branch\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Add new Branch\"), React.createElement(Button, {\n    type: \"button\",\n    onClick: () => props.myClick(\"Employee\"),\n    value: \"Employee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"Add new Employee\")));\n} //TODO: move the keys away from a delimited string\n//      add popup instead of buttons to add\n\nDemo.propTypes = {\n  mySelect: PropTypes.func.isRequired,\n  myClick: PropTypes.func.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useEffect","useState","Fragment","Tree","Button","Popover","Form","PropTypes","GetTreeData","GetTreeChildren","axios","updateTreeData","list","key","children","map","node","GetChildNodes","ParentKey","Demo","props","treeData","setTreeData","url","DataTree","layout","labelCol","span","wrapperCol","tailLayout","offset","onLoadData","Promise","resolve","origin","onDragEnter","info","console","log","onRightClick","event","onDrop","window","confirm","dragNode","title","dropKey","eventKey","dragKey","dropPos","pos","split","dropPosition","Number","length","loop","data","callback","forEach","item","index","arr","dragObj","splice","dropToGap","push","expanded","unshift","ar","i","height","minHeight","mySelect","myClick","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Tree, Button, Popover, Form } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport axios from \"axios\";\r\n//import { onRightClick } from \"./popup\";\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return {\r\n        ...node,\r\n        children: updateTreeData(node.children, key, children)\r\n      };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\nfunction GetChildNodes(ParentKey) {\r\n  let children = GetTreeChildren(ParentKey);\r\n  return children;\r\n}\r\n\r\nexport function Demo(props) {\r\n  const [treeData, setTreeData] = useState(GetTreeData);\r\n  const url = `https://localhost:5001/api/trees`;\r\n\r\n  let DataTree = [];\r\n  useEffect(() => {\r\n    // async function fetchData() {\r\n    //   debugger;\r\n    //   let obj = [];\r\n    //   const response = await fetch(url);\r\n    // axios\r\n    //   .get(url)\r\n    //   .then(response => {\r\n    //     console.log(response);\r\n    //     response.data.map(Main => {\r\n    //       obj.push({\r\n    //         title: Main.data[0].value,\r\n    //         key: Main.data[1].value,\r\n    //         isLeaf: Main.data[2].value\r\n    //       });\r\n    //     });\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.log(error);\r\n    // //   });\r\n    // response.data.map(Main => {\r\n    //   obj.push({\r\n    //     title: Main.data[0].value,\r\n    //     key: Main.data[1].value,\r\n    //     isLeaf: Main.data[2].value\r\n    //   });\r\n    // });\r\n    // return obj;\r\n    // }\r\n    //setTreeData(fetchData());\r\n    //DataTree = fetchData();\r\n  });\r\n  const layout = {\r\n    labelCol: {\r\n      span: 8\r\n    },\r\n    wrapperCol: {\r\n      span: 16\r\n    }\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 8,\r\n      span: 16\r\n    }\r\n  };\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  const onDragEnter = info => {\r\n    console.log(info);\r\n    // expandedKeys 需要受控时设置\r\n    // this.setState({\r\n    //   expandedKeys: info.expandedKeys,\r\n    // });\r\n  };\r\n  //on right click, open a dropdown at that location\r\n  const onRightClick = event => {\r\n    console.log(event);\r\n  };\r\n\r\n  //on drop, make a popup ask if they are sure they want to move X to Y\r\n  const onDrop = info => {\r\n    if (\r\n      !window.confirm(\r\n        `Are you sure you wish to move ${info.dragNode.title} into ${info.node.title}`\r\n      )\r\n    )\r\n      return;\r\n    console.log(info);\r\n    console.log(`DragNode: ${info.dragNode.title}   Node: ${info.node.title}`);\r\n    const dropKey = info.node.props.eventKey;\r\n    const dragKey = info.dragNode.props.eventKey;\r\n    const dropPos = info.node.props.pos.split(\"-\");\r\n    const dropPosition =\r\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n\r\n    const loop = (data, key, callback) => {\r\n      data.forEach((item, index, arr) => {\r\n        if (item.key === key) {\r\n          return callback(item, index, arr);\r\n        }\r\n        if (item.children) {\r\n          return loop(item.children, key, callback);\r\n        }\r\n      });\r\n    };\r\n    const data = [...treeData];\r\n\r\n    // Find dragObject\r\n    let dragObj;\r\n    loop(data, dragKey, (item, index, arr) => {\r\n      arr.splice(index, 1);\r\n      dragObj = item;\r\n    });\r\n\r\n    if (!info.dropToGap) {\r\n      // Drop on the content\r\n      loop(data, dropKey, item => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.push(dragObj);\r\n      });\r\n    } else if (\r\n      (info.node.props.children || []).length > 0 && // Has children\r\n      info.node.props.expanded && // Is expanded\r\n      dropPosition === 1 // On the bottom gap\r\n    ) {\r\n      loop(data, dropKey, item => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.unshift(dragObj);\r\n      });\r\n    } else {\r\n      let ar;\r\n      let i;\r\n      loop(data, dropKey, (item, index, arr) => {\r\n        ar = arr;\r\n        i = index;\r\n      });\r\n      if (dropPosition === -1) {\r\n        ar.splice(i, 0, dragObj);\r\n      } else {\r\n        ar.splice(i + 1, 0, dragObj);\r\n      }\r\n    }\r\n    //update actual system as well, if it works then set the tree data\r\n    setTreeData(data);\r\n  };\r\n  // const onSelect = (selectedKeys, otherValue) => {\r\n  //   debugger;\r\n  //   console.log(selectedKeys);\r\n  //   console.log(otherValue);\r\n  // };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <Popover\r\n        content={<a onClick={hide}>Close</a>}\r\n        title=\"Title\"\r\n        trigger=\"click\"\r\n        visible={Visible}\r\n        onVisibleChange={handleVisibleChange}\r\n      ></Popover> */}\r\n      <Tree\r\n        {...layout}\r\n        style={{ height: \"auto\", minHeight: \"570px\" }}\r\n        loadData={onLoadData}\r\n        onSelect={props.mySelect}\r\n        treeData={treeData}\r\n        draggable\r\n        onDragEnter={onDragEnter}\r\n        onDrop={onDrop}\r\n        onRightClick={onRightClick}\r\n      />\r\n      <Form.Item>\r\n        <Button type=\"button\" onClick={() => props.myClick(\"Branch\")}>\r\n          Add new Branch\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => props.myClick(\"Employee\")}\r\n          value=\"Employee\"\r\n        >\r\n          Add new Employee\r\n        </Button>\r\n      </Form.Item>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n//TODO: move the keys away from a delimited string\r\n//      add popup instead of buttons to add\r\nDemo.propTypes = {\r\n  mySelect: PropTypes.func.isRequired,\r\n  myClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Demo;\r\n"]},"metadata":{},"sourceType":"module"}