{"ast":null,"code":"import _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\TreeCover.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\"; //import { GetTreeData, GetTreeChildren } from \"./MockData\";\n\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\nimport { TreeTree } from \"./Tree\";\nimport { TreeSearch } from \"./TreeSearch\"; //fixed calls\n\nconst rootURLCall = \"https://localhost:5001/api/trees\";\nconst childURLCall = \"https://localhost:5001/api/trees/\";\nconst searchURLCall = \"https://localhost:5001/api/tree/\";\nexport function BranchTree(props) {\n  //hooks\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setisLoading = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        search = _useState4[0],\n        setSearch = _useState4[1]; //reset tree data each time rootBranch gets updated\n\n\n  useEffect(() => {}, [props.rootBranch]);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(TreeSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(TreeTree, {\n    rootBranch: \"0\",\n    onRightClick: props.onRightClick,\n    onSelect: props.onSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n}\nBranchTree.propTypes = {\n  rootBranch: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired,\n  isBranch: PropTypes.bool,\n  //leave for now\n  form: PropTypes.bool //leave for now\n\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\TreeCover.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","TreeTree","TreeSearch","rootURLCall","childURLCall","searchURLCall","BranchTree","props","isLoading","setisLoading","search","setSearch","rootBranch","onRightClick","onSelect","propTypes","string","isRequired","func","isBranch","bool","form"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,KAA7C,QAA0D,MAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP,C,CACA;;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,mBAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,kCAApB;AACA,MAAMC,YAAY,GAAG,mCAArB;AACA,MAAMC,aAAa,GAAG,kCAAtB;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAChC;AADgC,oBAEEhB,QAAQ,CAAC,IAAD,CAFV;AAAA;AAAA,QAEzBiB,SAFyB;AAAA,QAEdC,YAFc;;AAAA,qBAGJlB,QAAQ,CAAC,EAAD,CAHJ;AAAA;AAAA,QAGzBmB,MAHyB;AAAA,QAGjBC,SAHiB,kBAKhC;;;AACArB,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACiB,KAAK,CAACK,UAAP,CAAX,CAAT;AAEA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEJ,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,oBAAC,QAAD;AACE,IAAA,UAAU,EAAC,GADb;AAEE,IAAA,YAAY,EAAED,KAAK,CAACM,YAFtB;AAGE,IAAA,QAAQ,EAAEN,KAAK,CAACO,QAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF;AAaD;AACDR,UAAU,CAACS,SAAX,GAAuB;AACrBH,EAAAA,UAAU,EAAEd,SAAS,CAACkB,MAAV,CAAiBC,UADR;AAErBH,EAAAA,QAAQ,EAAEhB,SAAS,CAACoB,IAAV,CAAeD,UAFJ;AAGrBJ,EAAAA,YAAY,EAAEf,SAAS,CAACoB,IAAV,CAAeD,UAHR;AAIrBE,EAAAA,QAAQ,EAAErB,SAAS,CAACsB,IAJC;AAIK;AAC1BC,EAAAA,IAAI,EAAEvB,SAAS,CAACsB,IALK,CAKC;;AALD,CAAvB","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\n//import { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\nimport { TreeTree } from \"./Tree\";\r\nimport { TreeSearch } from \"./TreeSearch\";\r\n\r\n//fixed calls\r\nconst rootURLCall = \"https://localhost:5001/api/trees\";\r\nconst childURLCall = \"https://localhost:5001/api/trees/\";\r\nconst searchURLCall = \"https://localhost:5001/api/tree/\";\r\n\r\nexport function BranchTree(props) {\r\n  //hooks\r\n  const [isLoading, setisLoading] = useState(true);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  //reset tree data each time rootBranch gets updated\r\n  useEffect(() => {}, [props.rootBranch]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Spin spinning={isLoading}>\r\n        <TreeSearch />\r\n\r\n        <TreeTree\r\n          rootBranch=\"0\"\r\n          onRightClick={props.onRightClick}\r\n          onSelect={props.onSelect}\r\n        />\r\n      </Spin>\r\n    </Layout>\r\n  );\r\n}\r\nBranchTree.propTypes = {\r\n  rootBranch: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onRightClick: PropTypes.func.isRequired,\r\n  isBranch: PropTypes.bool, //leave for now\r\n  form: PropTypes.bool, //leave for now\r\n};\r\n"]},"metadata":{},"sourceType":"module"}