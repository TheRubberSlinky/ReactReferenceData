{"ast":null,"code":"var _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\TreeSearch.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\nimport { treeSearch } from \"./calls\"; //constants\n\nconst Search = Input.Search;\nexport function tSearch(props) {\n  //async function to search the tree\n  async function treeSearch(e) {\n    if (e != \"\") {\n      //const url = `${props.searchURLCall}${e}`;\n      const obj = treeSearch(props.searchURLCall, e);\n      props.UpdateTree(obj);\n    } else {\n      props.UpdateTree();\n    }\n  }\n\n  return React.createElement(Search, {\n    placeholder: \"search...\",\n    enterButton: \"Search\",\n    size: \"medium\",\n    onSearch: tSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n}\nTreeSearch.propTypes = {\n  UpdateTree: PropTypes.func.isRequired,\n  searchURLCall: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\TreeSearch.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","treeSearch","Search","tSearch","props","e","obj","searchURLCall","UpdateTree","TreeSearch","propTypes","func","isRequired","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,KAA7C,QAA0D,MAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,mBAA3C;AACA,SAASC,UAAT,QAA2B,SAA3B,C,CAEA;;AACA,MAAMC,MAAM,GAAGL,KAAK,CAACK,MAArB;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B;AACA,iBAAeH,UAAf,CAA0BI,CAA1B,EAA6B;AAC3B,QAAIA,CAAC,IAAI,EAAT,EAAa;AACX;AACA,YAAMC,GAAG,GAAGL,UAAU,CAACG,KAAK,CAACG,aAAP,EAAsBF,CAAtB,CAAtB;AACAD,MAAAA,KAAK,CAACI,UAAN,CAAiBF,GAAjB;AACD,KAJD,MAIO;AACLF,MAAAA,KAAK,CAACI,UAAN;AACD;AACF;;AAED,SACE,oBAAC,MAAD;AACE,IAAA,WAAW,EAAC,WADd;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,QAAQ,EAAEL,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD;AACDM,UAAU,CAACC,SAAX,GAAuB;AACrBF,EAAAA,UAAU,EAAEV,SAAS,CAACa,IAAV,CAAeC,UADN;AAErBL,EAAAA,aAAa,EAAET,SAAS,CAACe,MAAV,CAAiBD;AAFX,CAAvB","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\nimport { treeSearch } from \"./calls\";\r\n\r\n//constants\r\nconst Search = Input.Search;\r\n\r\nexport function tSearch(props) {\r\n  //async function to search the tree\r\n  async function treeSearch(e) {\r\n    if (e != \"\") {\r\n      //const url = `${props.searchURLCall}${e}`;\r\n      const obj = treeSearch(props.searchURLCall, e);\r\n      props.UpdateTree(obj);\r\n    } else {\r\n      props.UpdateTree();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Search\r\n      placeholder=\"search...\"\r\n      enterButton=\"Search\"\r\n      size=\"medium\"\r\n      onSearch={tSearch}\r\n    />\r\n  );\r\n}\r\nTreeSearch.propTypes = {\r\n  UpdateTree: PropTypes.func.isRequired,\r\n  searchURLCall: PropTypes.string.isRequired,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}