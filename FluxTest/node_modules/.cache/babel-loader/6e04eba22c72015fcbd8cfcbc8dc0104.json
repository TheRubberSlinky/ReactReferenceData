{"ast":null,"code":"import _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\TreeCover.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\"; //import { GetTreeData, GetTreeChildren } from \"./MockData\";\n\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\nimport { TreeTree } from \"./Tree\";\nimport { TreeSearch } from \"./TreeSearch\"; //fixed calls\n\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\n\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\n\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\n\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\n\nconst getBranchInfoCall = \"\"; //link to get all branch info\n\nconst updateBranchCall = \"\"; //link to update the branch\n\nconst updateEmployeeCall = \"\"; //link to update the employee\n\nexport function BranchTree(props) {\n  //hooks\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setisLoading = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        search = _useState6[0],\n        setSearch = _useState6[1];\n\n  function TreeUpdate(e) {\n    if (!e) setTreeData([]);else setTreeData(e);\n  }\n\n  function UpdateDrag(dragNode, node) {\n    //the two nodes, need the info of dragNode, and the branchKey of node\n    const newBranch = node.key; //see if dragnode is a branch or employee\n\n    if (dragNode.isLeaf) {//is employee\n      //get info of employee\n      //update employee\n    } else {} //is branch\n      //get info of branch\n      //update branch\n      //do a call to get all the info on the dragNode\n      //post update with all the information, along with the new branch key\n\n  } //reset tree data each time rootBranch gets updated\n\n\n  useEffect(() => {}, [props.rootBranch]);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(TreeSearch, {\n    searchURLCall: searchURLCall,\n    UpdateTree: TreeUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(TreeTree, {\n    data: treeData,\n    rootBranch: \"0\",\n    UpdateDrag: UpdateDrag,\n    onRightClick: props.onRightClick,\n    onSelect: props.onSelect,\n    rootURLCall: rootURLCall,\n    childURLCall: childURLCall,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })));\n}\nBranchTree.propTypes = {\n  rootBranch: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired,\n  isBranch: PropTypes.bool,\n  //leave for now\n  form: PropTypes.bool //leave for now\n\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\TreeCover.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","TreeTree","TreeSearch","rootURLCall","childURLCall","searchURLCall","getEmployeeInfoCall","getBranchInfoCall","updateBranchCall","updateEmployeeCall","BranchTree","props","treeData","setTreeData","isLoading","setisLoading","search","setSearch","TreeUpdate","e","UpdateDrag","dragNode","node","newBranch","key","isLeaf","rootBranch","onRightClick","onSelect","propTypes","string","isRequired","func","isBranch","bool","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\n//import { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\nimport { TreeTree } from \"./Tree\";\r\nimport { TreeSearch } from \"./TreeSearch\";\r\n\r\n//fixed calls\r\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\r\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\r\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\r\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\r\nconst getBranchInfoCall = \"\"; //link to get all branch info\r\nconst updateBranchCall = \"\"; //link to update the branch\r\nconst updateEmployeeCall = \"\"; //link to update the employee\r\n\r\nexport function BranchTree(props) {\r\n  //hooks\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  function TreeUpdate(e) {\r\n    if (!e) setTreeData([]);\r\n    else setTreeData(e);\r\n  }\r\n\r\n  function UpdateDrag(dragNode, node) {\r\n    //the two nodes, need the info of dragNode, and the branchKey of node\r\n    const newBranch = node.key;\r\n    //see if dragnode is a branch or employee\r\n    if (dragNode.isLeaf) {\r\n      //is employee\r\n      //get info of employee\r\n      //update employee\r\n    } else {\r\n      //is branch\r\n      //get info of branch\r\n      //update branch\r\n    }\r\n    //do a call to get all the info on the dragNode\r\n    //post update with all the information, along with the new branch key\r\n  }\r\n\r\n  //reset tree data each time rootBranch gets updated\r\n  useEffect(() => {}, [props.rootBranch]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Spin spinning={isLoading}>\r\n        <TreeSearch searchURLCall={searchURLCall} UpdateTree={TreeUpdate} />\r\n\r\n        <TreeTree\r\n          data={treeData}\r\n          rootBranch=\"0\"\r\n          UpdateDrag={UpdateDrag}\r\n          onRightClick={props.onRightClick}\r\n          onSelect={props.onSelect}\r\n          rootURLCall={rootURLCall}\r\n          childURLCall={childURLCall}\r\n        />\r\n      </Spin>\r\n    </Layout>\r\n  );\r\n}\r\nBranchTree.propTypes = {\r\n  rootBranch: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onRightClick: PropTypes.func.isRequired,\r\n  isBranch: PropTypes.bool, //leave for now\r\n  form: PropTypes.bool, //leave for now\r\n};\r\n"]},"metadata":{},"sourceType":"module"}