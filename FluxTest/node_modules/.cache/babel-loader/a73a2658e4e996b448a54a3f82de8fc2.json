{"ast":null,"code":"import _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\TreeCover.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\"; //import { GetTreeData, GetTreeChildren } from \"./MockData\";\n\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\nimport { TreeTree } from \"./Tree\";\nimport { testSearch } from \"./TreeSearch\";\nimport { UpdateCall } from \"./calls\"; //fixed calls\n\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\n\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\n\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\n\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\n\nconst getBranchInfoCall = \"\"; //link to get all branch info\n\nconst updateBranchCall = \"\"; //link to update the branch\n\nconst updateEmployeeCall = \"\"; //link to update the employee\n\nexport function BranchTree(props) {\n  //hooks\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setisLoading = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        search = _useState6[0],\n        setSearch = _useState6[1];\n\n  function TreeUpdate(e) {\n    if (!e) setTreeData([]);else setTreeData(e);\n  }\n\n  async function UpdateDrag(dragNode, node) {\n    await UpdateCall(getEmployeeInfoCall, updateEmployeeCall, getBranchInfoCall, updateBranchCall, node, dragNode);\n  } //reset tree data each time rootBranch gets updated\n\n\n  useEffect(() => {}, [props.rootBranch]);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"tSearch\", {\n    searchURLCall: searchURLCall,\n    UpdateTree: TreeUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(TreeTree, {\n    data: treeData,\n    rootBranch: \"0\",\n    UpdateDrag: UpdateDrag,\n    onRightClick: props.onRightClick,\n    onSelect: props.onSelect,\n    rootURLCall: rootURLCall,\n    childURLCall: childURLCall,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })));\n}\nBranchTree.propTypes = {\n  rootBranch: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired,\n  isBranch: PropTypes.bool,\n  //leave for now\n  form: PropTypes.bool //leave for now\n\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\TreeCover.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","TreeTree","testSearch","UpdateCall","rootURLCall","childURLCall","searchURLCall","getEmployeeInfoCall","getBranchInfoCall","updateBranchCall","updateEmployeeCall","BranchTree","props","treeData","setTreeData","isLoading","setisLoading","search","setSearch","TreeUpdate","e","UpdateDrag","dragNode","node","rootBranch","onRightClick","onSelect","propTypes","string","isRequired","func","isBranch","bool","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\n//import { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\nimport { TreeTree } from \"./Tree\";\r\nimport { testSearch } from \"./TreeSearch\";\r\nimport { UpdateCall } from \"./calls\";\r\n\r\n//fixed calls\r\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\r\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\r\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\r\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\r\nconst getBranchInfoCall = \"\"; //link to get all branch info\r\nconst updateBranchCall = \"\"; //link to update the branch\r\nconst updateEmployeeCall = \"\"; //link to update the employee\r\n\r\nexport function BranchTree(props) {\r\n  //hooks\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  function TreeUpdate(e) {\r\n    if (!e) setTreeData([]);\r\n    else setTreeData(e);\r\n  }\r\n\r\n  async function UpdateDrag(dragNode, node) {\r\n    await UpdateCall(\r\n      getEmployeeInfoCall,\r\n      updateEmployeeCall,\r\n      getBranchInfoCall,\r\n      updateBranchCall,\r\n      node,\r\n      dragNode\r\n    );\r\n  }\r\n\r\n  //reset tree data each time rootBranch gets updated\r\n  useEffect(() => {}, [props.rootBranch]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Spin spinning={isLoading}>\r\n        <tSearch searchURLCall={searchURLCall} UpdateTree={TreeUpdate} />\r\n\r\n        <TreeTree\r\n          data={treeData}\r\n          rootBranch=\"0\"\r\n          UpdateDrag={UpdateDrag}\r\n          onRightClick={props.onRightClick}\r\n          onSelect={props.onSelect}\r\n          rootURLCall={rootURLCall}\r\n          childURLCall={childURLCall}\r\n        />\r\n      </Spin>\r\n    </Layout>\r\n  );\r\n}\r\nBranchTree.propTypes = {\r\n  rootBranch: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onRightClick: PropTypes.func.isRequired,\r\n  isBranch: PropTypes.bool, //leave for now\r\n  form: PropTypes.bool, //leave for now\r\n};\r\n"]},"metadata":{},"sourceType":"module"}