{"ast":null,"code":"import _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\GeneralManage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport 'antd/dist/antd.css';\nimport { Form, Input, InputNumber, Button } from 'antd';\nimport { getSpecificEmployeeByKey, getSpecificBranchByKey } from './MockData';\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nconst defaultBranch = [{\n  key: \"0,B\",\n  data: [{\n    name: 'BranchCode',\n    value: ''\n  }, {\n    name: 'BranchName',\n    value: ''\n  }, {\n    name: 'BranchCategory',\n    value: ''\n  }, {\n    name: 'ParentBranch',\n    value: ''\n  }]\n}];\nconst defaultEmployee = [{\n  key: \"0,E\",\n  data: [{\n    name: 'EmployeeNumber',\n    value: 'cc309921'\n  }, {\n    name: 'EmployeeName',\n    value: 'Mark'\n  }, {\n    name: 'EmployeeSurname',\n    value: 'Holloway'\n  }, {\n    name: 'EmployeeLastLoggedIn',\n    value: '2020-03-12'\n  }, {\n    name: 'EmployeeID',\n    value: '345864839579843'\n  }, {\n    name: 'EmployeeBranch',\n    value: 57\n  }]\n}];\nexport function GeneralDisplayPage(props) {\n  const _useState = useState(defaultBranch),\n        _useState2 = _slicedToArray(_useState, 2),\n        Data = _useState2[0],\n        setData = _useState2[1];\n\n  const onFinish = values => {\n    console.log(values); //post it\n  };\n\n  useEffect(() => {\n    if (props.GenKey !== undefined) {\n      let splt = props.GenKey.split(',');\n\n      switch (splt[splt.length - 1]) {\n        case 'L':\n        case 'B':\n          break;\n\n        case 'E':\n          setData(props.isEdit ? getSpecificEmployeeByKey(splt[0]) : defaultEmployee);\n          break;\n\n        default:\n          setData(props.isEdit ? getSpecificBranchByKey(splt[0]) : defaultBranch);\n          break;\n      }\n    }\n  }, [props.GenKey, props.isEdit, props.type]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, Data.map(memes => {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, props.isEdit ? 'yes' : 'no'), React.createElement(Form, Object.assign({}, layout, {\n      name: \"nest-messages\",\n      onFinish: onFinish,\n      validateMessages: validateMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), memes.data.map(field => {\n      return React.createElement(Form.Item, {\n        label: field.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: field.name,\n        value: field.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }), React.createElement(Form.Item, {\n      wrapperCol: _objectSpread({}, layout.wrapperCol, {\n        offset: 8\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Submit\"))));\n  }));\n}\nGeneralDisplayPage.propTypes = {\n  GenKey: PropTypes.string.isRequired,\n  isEdit: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default GeneralDisplayPage;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\GeneralManage.js"],"names":["React","useState","useEffect","PropTypes","Form","Input","InputNumber","Button","getSpecificEmployeeByKey","getSpecificBranchByKey","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","defaultBranch","key","data","name","value","defaultEmployee","GeneralDisplayPage","props","Data","setData","onFinish","values","console","log","GenKey","undefined","splt","split","length","isEdit","type","map","memes","field","offset","propTypes","string","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Input, InputNumber, Button } from 'antd';\r\n\r\nimport {getSpecificEmployeeByKey, getSpecificBranchByKey} from './MockData'\r\n\r\nconst layout = {\r\n    labelCol: {\r\n      span: 8,\r\n    },\r\n    wrapperCol: {\r\n      span: 16,\r\n    },\r\n  };\r\n  const validateMessages = {\r\n    required: 'This field is required!',\r\n    types: {\r\n      email: 'Not a validate email!',\r\n      number: 'Not a validate number!',\r\n    },\r\n    number: {\r\n      range: 'Must be between ${min} and ${max}',\r\n    },\r\n  };\r\n  const defaultBranch = [{key: \"0,B\", data: [\r\n    {\r\n      name: 'BranchCode',\r\n      value: '',\r\n    },\r\n    {\r\n      name: 'BranchName',\r\n      value: '',\r\n    },\r\n    {\r\n      name: 'BranchCategory',\r\n      value: '',\r\n    },\r\n    {\r\n      name: 'ParentBranch',\r\n      value: '',\r\n    },\r\n  ]}];\r\n  const defaultEmployee = [{key: \"0,E\", data: [\r\n    {\r\n      name: 'EmployeeNumber',\r\n      value: 'cc309921',\r\n    },\r\n    {\r\n      name: 'EmployeeName',\r\n      value: 'Mark',\r\n    },\r\n    {\r\n      name: 'EmployeeSurname',\r\n      value: 'Holloway',\r\n    },\r\n    {\r\n      name: 'EmployeeLastLoggedIn',\r\n      value: '2020-03-12',\r\n    },\r\n    {\r\n      name: 'EmployeeID',\r\n      value: '345864839579843',\r\n    },\r\n    {\r\n      name: 'EmployeeBranch',\r\n      value: 57,\r\n    },\r\n  ] }];\r\nexport function GeneralDisplayPage(props) {\r\n    const [Data, setData] = useState(defaultBranch);\r\n    \r\n  const onFinish = values => {\r\n    console.log(values);\r\n    //post it\r\n  };\r\n    useEffect(() => {\r\n        if(props.GenKey !== undefined)\r\n        {\r\n      let splt = props.GenKey.split(',');\r\n      switch (splt[splt.length - 1]) {\r\n        case 'L':\r\n        case 'B':\r\n            break;\r\n        case 'E':\r\n            setData(props.isEdit ? getSpecificEmployeeByKey(splt[0]) : defaultEmployee);\r\n          break;\r\n          default:\r\n            setData(props.isEdit ? getSpecificBranchByKey(splt[0]) : defaultBranch);\r\n           break;\r\n      }\r\n      \r\n    }}, [props.GenKey, props.isEdit, props.type]);\r\n    return (\r\n        <div>\r\n            {Data.map(memes => {\r\n                return(\r\n                    <>\r\n                    {/* {memes.isEdit ? `Editing for ${props.GenKey}` : `Adding new`} */}\r\n                <h2>{props.isEdit ? 'yes' : 'no'}</h2>\r\n    <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n        {memes.data.map(field => {\r\n            return(\r\n                <Form.Item \r\n                \r\n                label={field.name}\r\n                >\r\n                <Input type=\"text\" name={field.name} value={field.value}/>    \r\n                </Form.Item>\r\n            );\r\n        })}\r\n      <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n    </>\r\n            );})}\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nGeneralDisplayPage.propTypes = {\r\n    GenKey: PropTypes.string.isRequired,\r\n    isEdit: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired\r\n  };\r\n\r\n  export default GeneralDisplayPage;"]},"metadata":{},"sourceType":"module"}