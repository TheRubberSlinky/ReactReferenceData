{"ast":null,"code":"import _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\TreeCover.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\"; //import { GetTreeData, GetTreeChildren } from \"./MockData\";\n\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\nimport { TreeTree } from \"./Tree\";\nimport { search } from \"./TreeSearch\"; //fixed calls\n\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\n\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\n\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\n\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\n\nconst getBranchInfoCall = \"\"; //link to get all branch info\n\nconst updateBranchCall = \"\"; //link to update the branch\n\nconst updateEmployeeCall = \"\"; //link to update the employee\n\nexport function BranchTree(props) {\n  //hooks\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setisLoading = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        search = _useState6[0],\n        setSearch = _useState6[1];\n\n  function TreeUpdate(e) {\n    if (!e) setTreeData([]);else setTreeData(e);\n  }\n\n  async function UpdateDrag(dragNode, node) {\n    const newBranch = node.key;\n\n    if (dragNode.isLeaf) {\n      let url = \"\".concat(props.getEmployeeInfoCall).concat(dragNode.key);\n      let Employee = [];\n      let response = await fetch(url, {\n        method: \"GET\"\n      });\n      let json = await response.json();\n      json.map(Main => {\n        Employee.push({\n          empId: Main.id,\n          empIsActive: Main.isActive,\n          empBranchId: Main.branch.id,\n          empChannelId: Main.channel.id,\n          empEmail: Main.empEmail,\n          empFirstName: Main.firstName,\n          empLastName: Main.lastName,\n          empBankerRoleId: Main.bankerRole.id,\n          empStaffNo: Main.staffNo\n        });\n      });\n      url = \"\".concat(props.updateEmployeeCall).concat(dragNode.key); //create a body to put the info in\n\n      response = await fetch(url, {\n        method: \"PUT\",\n        body: JSON.stringify(Employee)\n      });\n      json = await response.json(); //TODO: finish off this response depending on the result\n    } else {\n      let url = \"\".concat(props.getBranchInfoCall).concat(dragNode.key);\n      let Branch = [];\n      let response = await fetch(url, {\n        method: \"GET\"\n      });\n      let json = await response.json();\n      json.map(Main => {\n        Branch.push({\n          Id: 0,\n          BranchCode: 0,\n          BranchName: \"\",\n          BranchCategoryId: 0,\n          ChannelId: 0,\n          CanReceiveSale: true,\n          ParentBranchId: 0,\n          //or null\n          RegionId: 0,\n          //or null\n          IsActive: true,\n          IsPostBox: true,\n          OldCode: 0 //or null\n\n        });\n      });\n      url = \"\".concat(props.updateBranchCall).concat(dragNode.key); //make a body of the previous object\n\n      response = await fetch(url, {\n        method: \"PUT\",\n        body: JSON.stringify(Branch)\n      });\n      json = await response.json();\n    }\n  } //reset tree data each time rootBranch gets updated\n\n\n  useEffect(() => {}, [props.rootBranch]);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"search\", {\n    searchURLCall: searchURLCall,\n    UpdateTree: TreeUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(TreeTree, {\n    data: treeData,\n    rootBranch: \"0\",\n    UpdateDrag: UpdateDrag,\n    onRightClick: props.onRightClick,\n    onSelect: props.onSelect,\n    rootURLCall: rootURLCall,\n    childURLCall: childURLCall,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })));\n}\nBranchTree.propTypes = {\n  rootBranch: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired,\n  isBranch: PropTypes.bool,\n  //leave for now\n  form: PropTypes.bool //leave for now\n\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\TreeCover.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","TreeTree","search","rootURLCall","childURLCall","searchURLCall","getEmployeeInfoCall","getBranchInfoCall","updateBranchCall","updateEmployeeCall","BranchTree","props","treeData","setTreeData","isLoading","setisLoading","setSearch","TreeUpdate","e","UpdateDrag","dragNode","node","newBranch","key","isLeaf","url","Employee","response","fetch","method","json","map","Main","push","empId","id","empIsActive","isActive","empBranchId","branch","empChannelId","channel","empEmail","empFirstName","firstName","empLastName","lastName","empBankerRoleId","bankerRole","empStaffNo","staffNo","body","JSON","stringify","Branch","Id","BranchCode","BranchName","BranchCategoryId","ChannelId","CanReceiveSale","ParentBranchId","RegionId","IsActive","IsPostBox","OldCode","rootBranch","onRightClick","onSelect","propTypes","string","isRequired","func","isBranch","bool","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\n//import { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\nimport { TreeTree } from \"./Tree\";\r\nimport { search } from \"./TreeSearch\";\r\n\r\n//fixed calls\r\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\r\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\r\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\r\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\r\nconst getBranchInfoCall = \"\"; //link to get all branch info\r\nconst updateBranchCall = \"\"; //link to update the branch\r\nconst updateEmployeeCall = \"\"; //link to update the employee\r\n\r\nexport function BranchTree(props) {\r\n  //hooks\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  function TreeUpdate(e) {\r\n    if (!e) setTreeData([]);\r\n    else setTreeData(e);\r\n  }\r\n\r\n  async function UpdateDrag(dragNode, node) {\r\n    const newBranch = node.key;\r\n    if (dragNode.isLeaf) {\r\n      let url = `${props.getEmployeeInfoCall}${dragNode.key}`;\r\n      let Employee = [];\r\n      let response = await fetch(url, {\r\n        method: \"GET\",\r\n      });\r\n      let json = await response.json();\r\n      json.map((Main) => {\r\n        Employee.push({\r\n          empId: Main.id,\r\n          empIsActive: Main.isActive,\r\n          empBranchId: Main.branch.id,\r\n          empChannelId: Main.channel.id,\r\n          empEmail: Main.empEmail,\r\n          empFirstName: Main.firstName,\r\n          empLastName: Main.lastName,\r\n          empBankerRoleId: Main.bankerRole.id,\r\n          empStaffNo: Main.staffNo,\r\n        });\r\n      });\r\n\r\n      url = `${props.updateEmployeeCall}${dragNode.key}`;\r\n      //create a body to put the info in\r\n      response = await fetch(url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(Employee),\r\n      });\r\n      json = await response.json();\r\n      //TODO: finish off this response depending on the result\r\n    } else {\r\n      let url = `${props.getBranchInfoCall}${dragNode.key}`;\r\n      let Branch = [];\r\n      let response = await fetch(url, {\r\n        method: \"GET\",\r\n      });\r\n      let json = await response.json();\r\n      json.map((Main) => {\r\n        Branch.push({\r\n          Id: 0,\r\n          BranchCode: 0,\r\n          BranchName: \"\",\r\n          BranchCategoryId: 0,\r\n          ChannelId: 0,\r\n          CanReceiveSale: true,\r\n          ParentBranchId: 0, //or null\r\n          RegionId: 0, //or null\r\n          IsActive: true,\r\n          IsPostBox: true,\r\n          OldCode: 0, //or null\r\n        });\r\n      });\r\n\r\n      url = `${props.updateBranchCall}${dragNode.key}`;\r\n      //make a body of the previous object\r\n      response = await fetch(url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(Branch),\r\n      });\r\n      json = await response.json();\r\n    }\r\n  }\r\n\r\n  //reset tree data each time rootBranch gets updated\r\n  useEffect(() => {}, [props.rootBranch]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Spin spinning={isLoading}>\r\n        <search searchURLCall={searchURLCall} UpdateTree={TreeUpdate} />\r\n\r\n        <TreeTree\r\n          data={treeData}\r\n          rootBranch=\"0\"\r\n          UpdateDrag={UpdateDrag}\r\n          onRightClick={props.onRightClick}\r\n          onSelect={props.onSelect}\r\n          rootURLCall={rootURLCall}\r\n          childURLCall={childURLCall}\r\n        />\r\n      </Spin>\r\n    </Layout>\r\n  );\r\n}\r\nBranchTree.propTypes = {\r\n  rootBranch: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onRightClick: PropTypes.func.isRequired,\r\n  isBranch: PropTypes.bool, //leave for now\r\n  form: PropTypes.bool, //leave for now\r\n};\r\n"]},"metadata":{},"sourceType":"module"}