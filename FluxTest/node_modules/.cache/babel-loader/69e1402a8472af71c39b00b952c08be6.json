{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useState } from \"react\";\nimport { Tree, Button, Popover } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { GetTreeData, GetTreeChildren } from \"./MockData\"; //import { onRightClick } from \"./popup\";\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction GetChildNodes(ParentKey) {\n  let children = GetTreeChildren(ParentKey);\n  return children;\n}\n\nexport function Demo(props) {\n  const _useState = useState(GetTreeData()),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        Visible = _useState4[0],\n        setVisible = _useState4[1];\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\n      resolve();\n    });\n  }\n\n  const hide = () => {\n    setVisible(false);\n  };\n\n  const handleVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Tree, {\n    loadData: onLoadData // onSelect={props.mySelect}\n    ,\n    onSelect: React.createElement(Popover, {\n      content: React.createElement(\"a\", {\n        onClick: setVisibile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Close\"),\n      title: \"Title\",\n      trigger: \"click\",\n      visible: Visible,\n      onVisibleChange: handleVisibleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }),\n    treeData: treeData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"menu\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"primary\",\n    onClick: () => props.myClick(\"Branch\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Add new Branch\"), React.createElement(Button, {\n    type: \"primary\",\n    onClick: props.myClick,\n    value: \"Employee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Add new Employee\"));\n} //TODO: move the keys away from a delimited string\n//      add popup instead of buttons to add\n\nDemo.propTypes = {\n  mySelect: PropTypes.func.isRequired,\n  myClick: PropTypes.func.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useState","Tree","Button","Popover","PropTypes","GetTreeData","GetTreeChildren","updateTreeData","list","key","children","map","node","GetChildNodes","ParentKey","Demo","props","treeData","setTreeData","Visible","setVisible","onLoadData","Promise","resolve","origin","hide","handleVisibleChange","visible","setState","setVisibile","myClick","propTypes","mySelect","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Tree, Button, Popover } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\r\n//import { onRightClick } from \"./popup\";\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return {\r\n        ...node,\r\n        children: updateTreeData(node.children, key, children)\r\n      };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\nfunction GetChildNodes(ParentKey) {\r\n  let children = GetTreeChildren(ParentKey);\r\n  return children;\r\n}\r\n\r\nexport function Demo(props) {\r\n  const [treeData, setTreeData] = useState(GetTreeData());\r\n  const [Visible, setVisible] = useState(false);\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  const hide = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const handleVisibleChange = visible => {\r\n    this.setState({ visible });\r\n  };\r\n  return (\r\n    <>\r\n      <Tree\r\n        loadData={onLoadData}\r\n        // onSelect={props.mySelect}\r\n        onSelect={\r\n          <Popover\r\n            content={<a onClick={setVisibile}>Close</a>}\r\n            title=\"Title\"\r\n            trigger=\"click\"\r\n            visible={Visible}\r\n            onVisibleChange={handleVisibleChange}\r\n          ></Popover>\r\n        }\r\n        treeData={treeData}\r\n      />\r\n      <menu />\r\n      <Button type=\"primary\" onClick={() => props.myClick(\"Branch\")}>\r\n        Add new Branch\r\n      </Button>\r\n      <Button type=\"primary\" onClick={props.myClick} value=\"Employee\">\r\n        Add new Employee\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n//TODO: move the keys away from a delimited string\r\n//      add popup instead of buttons to add\r\nDemo.propTypes = {\r\n  mySelect: PropTypes.func.isRequired,\r\n  myClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Demo;\r\n"]},"metadata":{},"sourceType":"module"}