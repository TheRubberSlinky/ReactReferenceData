{"ast":null,"code":"import _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\GeneralManage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, InputNumber, Button } from \"antd\";\nimport { getSpecificEmployeeByKey, getSpecificBranchByKey, PostData } from \"./MockData\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: \"This field is required!\",\n  types: {\n    email: \"Not a validate email!\",\n    number: \"Not a validate number!\"\n  },\n  number: {\n    range: \"Must be between ${min} and ${max}\"\n  }\n};\nconst defaultBranch = [{\n  key: \"0\",\n  data: [{\n    name: \"BranchCode\",\n    value: \"\"\n  }, {\n    name: \"BranchName\",\n    value: \"\"\n  }, {\n    name: \"BranchCategory\",\n    value: \"\"\n  }, {\n    name: \"ParentBranch\",\n    value: \"\"\n  }]\n}];\nconst defaultEmployee = [{\n  key: \"0\",\n  data: [{\n    name: \"EmployeeNumber\",\n    value: \"\"\n  }, {\n    name: \"EmployeeName\",\n    value: \"\"\n  }, {\n    name: \"EmployeeSurname\",\n    value: \"\"\n  }, {\n    name: \"EmployeeLastLoggedIn\",\n    value: \"\"\n  }, {\n    name: \"EmployeeID\",\n    value: \"\"\n  }, {\n    name: \"EmployeeBranch\",\n    value: 0\n  }]\n}];\nexport function GeneralDisplayPage(props) {\n  let Data = defaultBranch;\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const onFinish = values => {\n    console.log(values);\n    PostData(props.type, props.isEdit, values); //post it\n  };\n\n  useEffect(() => {\n    if (props.GenKey !== undefined) {\n      switch (props.type) {\n        case \"Locale\":\n        case \"Branch\":\n          setData(props.isEdit ? getSpecificBranchByKey(props.GenKey) : defaultBranch);\n          break;\n\n        case \"Employee\":\n          setData(props.isEdit ? getSpecificEmployeeByKey(props.GenKey) : defaultEmployee);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    Data[0].data.map(x => form.setFieldsValue({\n      [x.name]: x.value\n    }));\n  }, [props.GenKey, props.isEdit, props.type]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, Data.map(memes => {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, props.isEdit ? \"Editing for \".concat(props.GenKey) : \"Adding new \".concat(props.type)), React.createElement(Form, Object.assign({\n      form: form\n    }, layout, {\n      name: \"nest-messages\",\n      onFinish: onFinish,\n      validateMessages: validateMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), memes.data.map(field => {\n      return React.createElement(Form.Item, {\n        label: field.name,\n        name: field.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Input, {\n        label: field.name,\n        value: {\n          value: \"test\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }));\n    }), React.createElement(Form.Item, {\n      wrapperCol: _objectSpread({}, layout.wrapperCol, {\n        offset: 8\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Submit\"))));\n  }));\n}\nGeneralDisplayPage.propTypes = {\n  GenKey: PropTypes.string.isRequired,\n  isEdit: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default GeneralDisplayPage;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\GeneralManage.js"],"names":["React","useState","useEffect","PropTypes","Form","Input","InputNumber","Button","getSpecificEmployeeByKey","getSpecificBranchByKey","PostData","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","defaultBranch","key","data","name","value","defaultEmployee","GeneralDisplayPage","props","Data","useForm","form","onFinish","values","console","log","type","isEdit","GenKey","undefined","setData","map","x","setFieldsValue","memes","field","offset","propTypes","string","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, InputNumber, Button } from \"antd\";\r\n\r\nimport {\r\n  getSpecificEmployeeByKey,\r\n  getSpecificBranchByKey,\r\n  PostData\r\n} from \"./MockData\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8\r\n  },\r\n  wrapperCol: {\r\n    span: 16\r\n  }\r\n};\r\nconst validateMessages = {\r\n  required: \"This field is required!\",\r\n  types: {\r\n    email: \"Not a validate email!\",\r\n    number: \"Not a validate number!\"\r\n  },\r\n  number: {\r\n    range: \"Must be between ${min} and ${max}\"\r\n  }\r\n};\r\nconst defaultBranch = [\r\n  {\r\n    key: \"0\",\r\n    data: [\r\n      {\r\n        name: \"BranchCode\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"BranchName\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"BranchCategory\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"ParentBranch\",\r\n        value: \"\"\r\n      }\r\n    ]\r\n  }\r\n];\r\nconst defaultEmployee = [\r\n  {\r\n    key: \"0\",\r\n    data: [\r\n      {\r\n        name: \"EmployeeNumber\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeName\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeSurname\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeLastLoggedIn\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeID\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeBranch\",\r\n        value: 0\r\n      }\r\n    ]\r\n  }\r\n];\r\nexport function GeneralDisplayPage(props) {\r\n  let Data = defaultBranch;\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = values => {\r\n    console.log(values);\r\n    PostData(props.type, props.isEdit, values);\r\n    //post it\r\n  };\r\n  useEffect(() => {\r\n    if (props.GenKey !== undefined) {\r\n      switch (props.type) {\r\n        case \"Locale\":\r\n        case \"Branch\":\r\n          setData(\r\n            props.isEdit ? getSpecificBranchByKey(props.GenKey) : defaultBranch\r\n          );\r\n          break;\r\n        case \"Employee\":\r\n          setData(\r\n            props.isEdit\r\n              ? getSpecificEmployeeByKey(props.GenKey)\r\n              : defaultEmployee\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    Data[0].data.map(x =>\r\n      form.setFieldsValue({\r\n        [x.name]: x.value\r\n      })\r\n    );\r\n  }, [props.GenKey, props.isEdit, props.type]);\r\n  return (\r\n    <div>\r\n      {Data.map(memes => {\r\n        return (\r\n          <>\r\n            <h2>\r\n              {props.isEdit\r\n                ? `Editing for ${props.GenKey}`\r\n                : `Adding new ${props.type}`}\r\n            </h2>\r\n            <Form\r\n              form={form}\r\n              {...layout}\r\n              name=\"nest-messages\"\r\n              onFinish={onFinish}\r\n              validateMessages={validateMessages}\r\n            >\r\n              {memes.data.map(field => {\r\n                return (\r\n                  <Form.Item label={field.name} name={field.name}>\r\n                    <Input label={field.name} value={{ value: \"test\" }} />\r\n                  </Form.Item>\r\n                );\r\n              })}\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nGeneralDisplayPage.propTypes = {\r\n  GenKey: PropTypes.string.isRequired,\r\n  isEdit: PropTypes.bool.isRequired,\r\n  type: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GeneralDisplayPage;\r\n"]},"metadata":{},"sourceType":"module"}