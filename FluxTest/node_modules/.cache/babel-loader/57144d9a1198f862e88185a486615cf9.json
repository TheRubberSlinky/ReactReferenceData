{"ast":null,"code":"var _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\calls.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\"; //async function to search the tree\n\nexport async function treeSearch(url, e) {\n  if (e != \"\") {\n    const url = \"\".concat(url).concat(e);\n    let obj = [];\n    const response = await fetch(url, {\n      method: \"GET\"\n    });\n    const json = await response.json();\n    json.map(Main => {\n      obj.push({\n        title: Main.data[2].value,\n        key: Main.data[1].value,\n        icon: Main.data[3].value === \"0\" ? React.createElement(HomeOutlined, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }) : React.createElement(UserOutlined, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }),\n        isLeaf: Main.data[3].value === \"0\" ? false : true\n      });\n    });\n    return obj;\n  } else {\n    return [];\n  }\n}\nexport async function GetChildNodes(callUrl, ParentKey) {\n  const url = \"\".concat(callUrl).concat(ParentKey);\n  let obj = [];\n  const response = await fetch(url, {\n    method: \"GET\"\n  });\n  const json = await response.json();\n  json.map(Main => {\n    // obj.push({\n    //   title: Main.name,\n    //   key: Main.id,\n    //   //icon: <HomeOutlined />, //find out how the response works to see fi it is a branch or employee\n    //   isLeaf: false, //find out ow the response works to see if it is a branch or employee\n    // });\n    obj.push({\n      //Update this to represent his code\n      title: Main.data[2].value,\n      key: Main.data[1].value,\n      icon: Main.data[3].value === \"0\" ? React.createElement(HomeOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }) : React.createElement(UserOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }),\n      isLeaf: Main.data[3].value === \"0\" ? false : true\n    });\n  });\n  return obj;\n}\nexport async function UpdateCall(EmployeegetURL, employeeputURL, branchGetURL, branchPutURL, node, dragNode) {\n  const newBranch = node.key;\n\n  if (dragNode.isLeaf) {\n    let url = \"\".concat(props.getEmployeeInfoCall).concat(dragNode.key);\n    let Employee = [];\n    let response = await fetch(url, {\n      method: \"GET\"\n    });\n    let json = await response.json();\n    json.map(Main => {\n      Employee.push({\n        empId: Main.id,\n        empIsActive: Main.isActive,\n        empBranchId: Main.branch.id,\n        empChannelId: Main.channel.id,\n        empEmail: Main.empEmail,\n        empFirstName: Main.firstName,\n        empLastName: Main.lastName,\n        empBankerRoleId: Main.bankerRole.id,\n        empStaffNo: Main.staffNo\n      });\n    });\n    url = \"\".concat(props.updateEmployeeCall).concat(dragNode.key); //create a body to put the info in\n\n    response = await fetch(url, {\n      method: \"PUT\",\n      body: JSON.stringify(Employee)\n    });\n    json = await response.json(); //TODO: finish off this response depending on the result\n  } else {\n    let url = \"\".concat(props.getBranchInfoCall).concat(dragNode.key);\n    let Branch = [];\n    let response = await fetch(url, {\n      method: \"GET\"\n    });\n    let json = await response.json();\n    json.map(Main => {\n      Branch.push({\n        Id: 0,\n        BranchCode: 0,\n        BranchName: \"\",\n        BranchCategoryId: 0,\n        ChannelId: 0,\n        CanReceiveSale: true,\n        ParentBranchId: 0,\n        //or null\n        RegionId: 0,\n        //or null\n        IsActive: true,\n        IsPostBox: true,\n        OldCode: 0 //or null\n\n      });\n    });\n    url = \"\".concat(props.updateBranchCall).concat(dragNode.key); //make a body of the previous object\n\n    response = await fetch(url, {\n      method: \"PUT\",\n      body: JSON.stringify(Branch)\n    });\n    json = await response.json();\n  }\n}","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\calls.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","treeSearch","url","e","obj","response","fetch","method","json","map","Main","push","title","data","value","key","icon","isLeaf","GetChildNodes","callUrl","ParentKey","UpdateCall","EmployeegetURL","employeeputURL","branchGetURL","branchPutURL","node","dragNode","newBranch","props","getEmployeeInfoCall","Employee","empId","id","empIsActive","isActive","empBranchId","branch","empChannelId","channel","empEmail","empFirstName","firstName","empLastName","lastName","empBankerRoleId","bankerRole","empStaffNo","staffNo","updateEmployeeCall","body","JSON","stringify","getBranchInfoCall","Branch","Id","BranchCode","BranchName","BranchCategoryId","ChannelId","CanReceiveSale","ParentBranchId","RegionId","IsActive","IsPostBox","OldCode","updateBranchCall"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\n\r\n//async function to search the tree\r\nexport async function treeSearch(url, e) {\r\n  if (e != \"\") {\r\n    const url = `${url}${e}`;\r\n    let obj = [];\r\n    const response = await fetch(url, {\r\n      method: \"GET\",\r\n    });\r\n    const json = await response.json();\r\n    json.map((Main) => {\r\n      obj.push({\r\n        title: Main.data[2].value,\r\n        key: Main.data[1].value,\r\n        icon: Main.data[3].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\r\n        isLeaf: Main.data[3].value === \"0\" ? false : true,\r\n      });\r\n    });\r\n    return obj;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function GetChildNodes(callUrl, ParentKey) {\r\n  const url = `${callUrl}${ParentKey}`;\r\n  let obj = [];\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n  });\r\n  const json = await response.json();\r\n  json.map((Main) => {\r\n    // obj.push({\r\n    //   title: Main.name,\r\n    //   key: Main.id,\r\n    //   //icon: <HomeOutlined />, //find out how the response works to see fi it is a branch or employee\r\n    //   isLeaf: false, //find out ow the response works to see if it is a branch or employee\r\n    // });\r\n    obj.push({\r\n      //Update this to represent his code\r\n      title: Main.data[2].value,\r\n      key: Main.data[1].value,\r\n      icon: Main.data[3].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\r\n      isLeaf: Main.data[3].value === \"0\" ? false : true,\r\n    });\r\n  });\r\n  return obj;\r\n}\r\n\r\nexport async function UpdateCall(\r\n  EmployeegetURL,\r\n  employeeputURL,\r\n  branchGetURL,\r\n  branchPutURL,\r\n  node,\r\n  dragNode\r\n) {\r\n  const newBranch = node.key;\r\n  if (dragNode.isLeaf) {\r\n    let url = `${props.getEmployeeInfoCall}${dragNode.key}`;\r\n    let Employee = [];\r\n    let response = await fetch(url, {\r\n      method: \"GET\",\r\n    });\r\n    let json = await response.json();\r\n    json.map((Main) => {\r\n      Employee.push({\r\n        empId: Main.id,\r\n        empIsActive: Main.isActive,\r\n        empBranchId: Main.branch.id,\r\n        empChannelId: Main.channel.id,\r\n        empEmail: Main.empEmail,\r\n        empFirstName: Main.firstName,\r\n        empLastName: Main.lastName,\r\n        empBankerRoleId: Main.bankerRole.id,\r\n        empStaffNo: Main.staffNo,\r\n      });\r\n    });\r\n\r\n    url = `${props.updateEmployeeCall}${dragNode.key}`;\r\n    //create a body to put the info in\r\n    response = await fetch(url, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(Employee),\r\n    });\r\n    json = await response.json();\r\n    //TODO: finish off this response depending on the result\r\n  } else {\r\n    let url = `${props.getBranchInfoCall}${dragNode.key}`;\r\n    let Branch = [];\r\n    let response = await fetch(url, {\r\n      method: \"GET\",\r\n    });\r\n    let json = await response.json();\r\n    json.map((Main) => {\r\n      Branch.push({\r\n        Id: 0,\r\n        BranchCode: 0,\r\n        BranchName: \"\",\r\n        BranchCategoryId: 0,\r\n        ChannelId: 0,\r\n        CanReceiveSale: true,\r\n        ParentBranchId: 0, //or null\r\n        RegionId: 0, //or null\r\n        IsActive: true,\r\n        IsPostBox: true,\r\n        OldCode: 0, //or null\r\n      });\r\n    });\r\n\r\n    url = `${props.updateBranchCall}${dragNode.key}`;\r\n    //make a body of the previous object\r\n    response = await fetch(url, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(Branch),\r\n    });\r\n    json = await response.json();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}