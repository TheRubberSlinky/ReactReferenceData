{"ast":null,"code":"import _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { Tree, Button, Menu, Dropdown, Form } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\nimport axios from \"axios\"; //import { onRightClick } from \"./popup\";\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction GetChildNodes(ParentKey) {\n  const url = \"https://localhost:5001/api/trees/\".concat(ParentKey); //debugger;\n\n  let obj = [];\n  fetch(url, {\n    method: \"GET\"\n  }).then(res => res.json()).then(response => {\n    console.log(GetTreeChildren(ParentKey));\n    console.log(response);\n    response.map(Main => {\n      obj.push({\n        title: Main.data[2].value,\n        key: Main.data[1].value,\n        isLeaf: Main.data[3].value === \"0\" ? false : true\n      });\n    });\n  }).catch(error => {\n    console.log(error);\n    return obj;\n  });\n  let children = obj; //GetTreeChildren(ParentKey);\n\n  return children;\n}\n\nexport function Demo(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        RCData = _useState4[0],\n        setRCData = _useState4[1];\n\n  const url = \"https://localhost:5001/api/trees\";\n  let DataTree = [];\n  useEffect(() => {\n    let obj = []; //const response = await fetch(url);\n    //console.log(response);\n\n    fetch(url, {\n      method: \"GET\",\n      headers: new Headers({\n        Accept: \"application/vnd.github.cloak-preview\"\n      })\n    }).then(res => res.json()).then(response => {\n      //console.log(response);\n      response.map(Main => {\n        obj.push({\n          title: Main.data[0].value,\n          key: Main.data[1].value,\n          isLeaf: Main.data[2].value === \"0\" ? false : true\n        });\n      });\n      setTreeData(obj);\n    }).catch(error => {\n      console.log(error);\n      return obj;\n    });\n    if (treeData) setTreeData(GetTreeData()); //if (treeData) setTreeData(fetchData());\n    //DataTree = fetchData();\n  }, []);\n  const layout = {\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16\n    }\n  };\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      const childNodes = GetChildNodes(key);\n      setTimeout(() => {\n        setTreeData(origin => updateTreeData(origin, key, childNodes));\n        resolve();\n      }, 1000);\n    });\n  }\n\n  const menu = React.createElement(Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, !RCData.isLeaf ? React.createElement(Menu.Item, {\n    key: \"7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Look a menu\") : \"\", React.createElement(Menu.Item, {\n    key: \"1\",\n    onClick: event => {\n      console.log(event);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"1st menu item\"));\n\n  const onDragEnter = info => {\n    console.log(info);\n  }; //on right click, open a dropdown at that location\n\n\n  const onRightClick = event => {\n    setRCData(event.node);\n    console.log(event);\n  }; //on drop, make a popup ask if they are sure they want to move X to Y\n\n\n  const onDrop = info => {\n    if (!window.confirm(\"Are you sure you wish to move \".concat(info.dragNode.title, \" into \").concat(info.node.title))) return;\n    console.log(info);\n    console.log(\"DragNode: \".concat(info.dragNode.title, \"   Node: \").concat(info.node.title));\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split(\"-\");\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n\n    const data = [...treeData]; // Find dragObject\n\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (!info.dropToGap) {\n      // Drop on the content\n      loop(data, dropKey, item => {\n        item.children = item.children || []; // where to insert\n\n        item.children.push(dragObj);\n      });\n    } else if ((info.node.props.children || []).length > 0 && // Has children\n    info.node.props.expanded && // Is expanded\n    dropPosition === 1 // On the bottom gap\n    ) {\n        loop(data, dropKey, item => {\n          item.children = item.children || []; // where to insert\n\n          item.children.unshift(dragObj);\n        });\n      } else {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    } //update actual system as well, if it works then set the tree data\n\n\n    setTreeData(data);\n  };\n\n  return React.createElement(Dropdown, {\n    overlay: menu,\n    trigger: [\"contextMenu\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(Tree, Object.assign({}, layout, {\n    style: {\n      height: \"auto\",\n      minHeight: \"570px\"\n    },\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    draggable: true,\n    onDragEnter: onDragEnter,\n    onDrop: onDrop,\n    onRightClick: onRightClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  })))) // <Form.Item>\n  //   <Button type=\"button\" onClick={() => props.myClick(\"Branch\")}>\n  //     Add new Branch\n  //   </Button>\n  //   <Button\n  //     type=\"button\"\n  //     onClick={() => props.myClick(\"Employee\")}\n  //     value=\"Employee\"\n  //   >\n  //     Add new Employee\n  //   </Button>\n  // </Form.Item>\n  ;\n} //TODO: move the keys away from a delimited string\n//      add popup instead of buttons to add\n\nDemo.propTypes = {\n  mySelect: PropTypes.func.isRequired,\n  myClick: PropTypes.func.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useEffect","useState","Fragment","Tree","Button","Menu","Dropdown","Form","PropTypes","GetTreeData","GetTreeChildren","axios","updateTreeData","list","key","children","map","node","GetChildNodes","ParentKey","url","obj","fetch","method","then","res","json","response","console","log","Main","push","title","data","value","isLeaf","catch","error","Demo","props","treeData","setTreeData","RCData","setRCData","DataTree","headers","Headers","Accept","layout","labelCol","span","wrapperCol","tailLayout","offset","onLoadData","Promise","resolve","childNodes","setTimeout","origin","menu","event","onDragEnter","info","onRightClick","onDrop","window","confirm","dragNode","dropKey","eventKey","dragKey","dropPos","pos","split","dropPosition","Number","length","loop","callback","forEach","item","index","arr","dragObj","splice","dropToGap","expanded","unshift","ar","i","height","minHeight","mySelect","propTypes","func","isRequired","myClick"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Tree, Button, Menu, Dropdown, Form } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport axios from \"axios\";\r\n//import { onRightClick } from \"./popup\";\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return {\r\n        ...node,\r\n        children: updateTreeData(node.children, key, children)\r\n      };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\nfunction GetChildNodes(ParentKey) {\r\n  const url = `https://localhost:5001/api/trees/${ParentKey}`;\r\n  //debugger;\r\n  let obj = [];\r\n  fetch(url, {\r\n    method: \"GET\"\r\n  })\r\n    .then(res => res.json())\r\n    .then(response => {\r\n      console.log(GetTreeChildren(ParentKey));\r\n      console.log(response);\r\n      response.map(Main => {\r\n        obj.push({\r\n          title: Main.data[2].value,\r\n          key: Main.data[1].value,\r\n          isLeaf: Main.data[3].value === \"0\" ? false : true\r\n        });\r\n      });\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      return obj;\r\n    });\r\n  let children = obj; //GetTreeChildren(ParentKey);\r\n  return children;\r\n}\r\n\r\nexport function Demo(props) {\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [RCData, setRCData] = useState([]);\r\n  const url = `https://localhost:5001/api/trees`;\r\n\r\n  let DataTree = [];\r\n  useEffect(() => {\r\n    let obj = [];\r\n    //const response = await fetch(url);\r\n    //console.log(response);\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: new Headers({\r\n        Accept: \"application/vnd.github.cloak-preview\"\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(response => {\r\n        //console.log(response);\r\n        response.map(Main => {\r\n          obj.push({\r\n            title: Main.data[0].value,\r\n            key: Main.data[1].value,\r\n            isLeaf: Main.data[2].value === \"0\" ? false : true\r\n          });\r\n        });\r\n        setTreeData(obj);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        return obj;\r\n      });\r\n    if (treeData) setTreeData(GetTreeData());\r\n    //if (treeData) setTreeData(fetchData());\r\n    //DataTree = fetchData();\r\n  }, []);\r\n  const layout = {\r\n    labelCol: {\r\n      span: 8\r\n    },\r\n    wrapperCol: {\r\n      span: 16\r\n    }\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 8,\r\n      span: 16\r\n    }\r\n  };\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n      const childNodes = GetChildNodes(key);\r\n      setTimeout(() => {\r\n        setTreeData(origin => updateTreeData(origin, key, childNodes));\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n  }\r\n  const menu = (\r\n    <Menu>\r\n      {/* see if it is a branch, if it is, allow add new branch and add new employee */}\r\n      {!RCData.isLeaf ? <Menu.Item key=\"7\">Look a menu</Menu.Item> : \"\"}\r\n      <Menu.Item\r\n        key=\"1\"\r\n        onClick={event => {\r\n          console.log(event);\r\n        }}\r\n      >\r\n        1st menu item\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n  const onDragEnter = info => {\r\n    console.log(info);\r\n  };\r\n  //on right click, open a dropdown at that location\r\n  const onRightClick = event => {\r\n    setRCData(event.node);\r\n    console.log(event);\r\n  };\r\n\r\n  //on drop, make a popup ask if they are sure they want to move X to Y\r\n  const onDrop = info => {\r\n    if (\r\n      !window.confirm(\r\n        `Are you sure you wish to move ${info.dragNode.title} into ${info.node.title}`\r\n      )\r\n    )\r\n      return;\r\n    console.log(info);\r\n    console.log(`DragNode: ${info.dragNode.title}   Node: ${info.node.title}`);\r\n    const dropKey = info.node.props.eventKey;\r\n    const dragKey = info.dragNode.props.eventKey;\r\n    const dropPos = info.node.props.pos.split(\"-\");\r\n    const dropPosition =\r\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n\r\n    const loop = (data, key, callback) => {\r\n      data.forEach((item, index, arr) => {\r\n        if (item.key === key) {\r\n          return callback(item, index, arr);\r\n        }\r\n        if (item.children) {\r\n          return loop(item.children, key, callback);\r\n        }\r\n      });\r\n    };\r\n    const data = [...treeData];\r\n\r\n    // Find dragObject\r\n    let dragObj;\r\n    loop(data, dragKey, (item, index, arr) => {\r\n      arr.splice(index, 1);\r\n      dragObj = item;\r\n    });\r\n\r\n    if (!info.dropToGap) {\r\n      // Drop on the content\r\n      loop(data, dropKey, item => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.push(dragObj);\r\n      });\r\n    } else if (\r\n      (info.node.props.children || []).length > 0 && // Has children\r\n      info.node.props.expanded && // Is expanded\r\n      dropPosition === 1 // On the bottom gap\r\n    ) {\r\n      loop(data, dropKey, item => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.unshift(dragObj);\r\n      });\r\n    } else {\r\n      let ar;\r\n      let i;\r\n      loop(data, dropKey, (item, index, arr) => {\r\n        ar = arr;\r\n        i = index;\r\n      });\r\n      if (dropPosition === -1) {\r\n        ar.splice(i, 0, dragObj);\r\n      } else {\r\n        ar.splice(i + 1, 0, dragObj);\r\n      }\r\n    }\r\n    //update actual system as well, if it works then set the tree data\r\n    setTreeData(data);\r\n  };\r\n\r\n  return (\r\n    <Dropdown overlay={menu} trigger={[\"contextMenu\"]}>\r\n      <div>\r\n        <Tree\r\n          {...layout}\r\n          style={{ height: \"auto\", minHeight: \"570px\" }}\r\n          loadData={onLoadData}\r\n          onSelect={props.mySelect}\r\n          treeData={treeData}\r\n          draggable\r\n          onDragEnter={onDragEnter}\r\n          onDrop={onDrop}\r\n          onRightClick={onRightClick}\r\n        />\r\n      </div>\r\n    </Dropdown>\r\n    // <Form.Item>\r\n    //   <Button type=\"button\" onClick={() => props.myClick(\"Branch\")}>\r\n    //     Add new Branch\r\n    //   </Button>\r\n    //   <Button\r\n    //     type=\"button\"\r\n    //     onClick={() => props.myClick(\"Employee\")}\r\n    //     value=\"Employee\"\r\n    //   >\r\n    //     Add new Employee\r\n    //   </Button>\r\n    // </Form.Item>\r\n  );\r\n}\r\n\r\n//TODO: move the keys away from a delimited string\r\n//      add popup instead of buttons to add\r\nDemo.propTypes = {\r\n  mySelect: PropTypes.func.isRequired,\r\n  myClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Demo;\r\n"]},"metadata":{},"sourceType":"module"}