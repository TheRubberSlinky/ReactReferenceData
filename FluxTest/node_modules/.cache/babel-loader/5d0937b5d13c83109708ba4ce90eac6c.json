{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport Dispatcher from \"../appDispatcher\";\nimport actionTypes from \"../actions/actionTypes\";\nconst CHANGE_EVENT = \"change\";\nlet _courses = [];\n\nclass CourseStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getCourses() {\n    return _courses;\n  }\n\n  getCourseBySlug(slug) {\n    return _courses.find(course => course.slug === slug);\n  }\n\n}\n\nconst store = new CourseStore();\nDispatcher.register(action => {\n  switch (action.actionType) {\n    case actionTypes.DELETE_COURSE:\n      _courses = _courses.filter(course => course.id !== parseInt(action.id, 10));\n      store.emitChange();\n      break;\n\n    case actionTypes.CREATE_COURSE:\n      _courses.push(action.course);\n\n      store.emitChange();\n      break;\n\n    case actionTypes.UPDATE_COURSE:\n      _courses = _courses.map(course => course.id === action.course.id ? action.course : course);\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_COURSES:\n      _courses = action.courses;\n      store.emitChange();\n      break;\n\n    default: // nothing to do here\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\stores\\courseStore.js"],"names":["EventEmitter","Dispatcher","actionTypes","CHANGE_EVENT","_courses","CourseStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getCourses","getCourseBySlug","slug","find","course","store","register","action","actionType","DELETE_COURSE","filter","id","parseInt","CREATE_COURSE","push","UPDATE_COURSE","map","LOAD_COURSES","courses"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAMC,WAAN,SAA0BL,YAA1B,CAAuC;AACrCM,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AAC1B,SAAKC,EAAL,CAAQL,YAAR,EAAsBI,QAAtB;AACD;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC7B,SAAKG,cAAL,CAAoBP,YAApB,EAAkCI,QAAlC;AACD;;AAEDI,EAAAA,UAAU,GAAG;AACX,SAAKC,IAAL,CAAUT,YAAV;AACD;;AAEDU,EAAAA,UAAU,GAAG;AACX,WAAOT,QAAP;AACD;;AAEDU,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB,WAAOX,QAAQ,CAACY,IAAT,CAAcC,MAAM,IAAIA,MAAM,CAACF,IAAP,KAAgBA,IAAxC,CAAP;AACD;;AAnBoC;;AAsBvC,MAAMG,KAAK,GAAG,IAAIb,WAAJ,EAAd;AAEAJ,UAAU,CAACkB,QAAX,CAAoBC,MAAM,IAAI;AAC5B,UAAQA,MAAM,CAACC,UAAf;AACE,SAAKnB,WAAW,CAACoB,aAAjB;AACElB,MAAAA,QAAQ,GAAGA,QAAQ,CAACmB,MAAT,CACTN,MAAM,IAAIA,MAAM,CAACO,EAAP,KAAcC,QAAQ,CAACL,MAAM,CAACI,EAAR,EAAY,EAAZ,CADvB,CAAX;AAGAN,MAAAA,KAAK,CAACP,UAAN;AACA;;AACF,SAAKT,WAAW,CAACwB,aAAjB;AACEtB,MAAAA,QAAQ,CAACuB,IAAT,CAAcP,MAAM,CAACH,MAArB;;AACAC,MAAAA,KAAK,CAACP,UAAN;AACA;;AACF,SAAKT,WAAW,CAAC0B,aAAjB;AACExB,MAAAA,QAAQ,GAAGA,QAAQ,CAACyB,GAAT,CAAaZ,MAAM,IAC5BA,MAAM,CAACO,EAAP,KAAcJ,MAAM,CAACH,MAAP,CAAcO,EAA5B,GAAiCJ,MAAM,CAACH,MAAxC,GAAiDA,MADxC,CAAX;AAGAC,MAAAA,KAAK,CAACP,UAAN;AACA;;AACF,SAAKT,WAAW,CAAC4B,YAAjB;AACE1B,MAAAA,QAAQ,GAAGgB,MAAM,CAACW,OAAlB;AACAb,MAAAA,KAAK,CAACP,UAAN;AACA;;AACF,YArBF,CAsBE;;AAtBF;AAwBD,CAzBD;AA2BA,eAAeO,KAAf","sourcesContent":["import { EventEmitter } from \"events\";\nimport Dispatcher from \"../appDispatcher\";\nimport actionTypes from \"../actions/actionTypes\";\n\nconst CHANGE_EVENT = \"change\";\nlet _courses = [];\n\nclass CourseStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getCourses() {\n    return _courses;\n  }\n\n  getCourseBySlug(slug) {\n    return _courses.find(course => course.slug === slug);\n  }\n}\n\nconst store = new CourseStore();\n\nDispatcher.register(action => {\n  switch (action.actionType) {\n    case actionTypes.DELETE_COURSE:\n      _courses = _courses.filter(\n        course => course.id !== parseInt(action.id, 10)\n      );\n      store.emitChange();\n      break;\n    case actionTypes.CREATE_COURSE:\n      _courses.push(action.course);\n      store.emitChange();\n      break;\n    case actionTypes.UPDATE_COURSE:\n      _courses = _courses.map(course =>\n        course.id === action.course.id ? action.course : course\n      );\n      store.emitChange();\n      break;\n    case actionTypes.LOAD_COURSES:\n      _courses = action.courses;\n      store.emitChange();\n      break;\n    default:\n    // nothing to do here\n  }\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}