{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useState } from 'react';\nimport { Tree } from 'antd';\nimport PropTypes from \"prop-types\";\nconst TreeNode = Tree.TreeNode;\nconst initTreeDate = [{\n  title: 'Expand to load',\n  key: '0'\n}, {\n  title: 'Expand to load',\n  key: '1'\n}, {\n  title: 'Tree Node',\n  key: '2',\n  isLeaf: true\n}]; // It's just a simple demo. You can use tree map to optimize update perf.\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction Demo(props) {\n  const _useState = useState(initTreeDate),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTimeout(() => {\n        setTreeData(origin => updateTreeData(origin, key, [{\n          title: 'Child Node',\n          key: \"\".concat(key, \"-0\")\n        }, {\n          title: 'Child Node',\n          key: \"\".concat(key, \"-1\")\n        }]));\n        resolve();\n      }, 500);\n    });\n  }\n\n  return React.createElement(Tree, {\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  });\n}\n\n;\nDemo.propTypes = {\n  course: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useState","Tree","PropTypes","TreeNode","initTreeDate","title","key","isLeaf","updateTreeData","list","children","map","node","Demo","props","treeData","setTreeData","onLoadData","Promise","resolve","setTimeout","origin","mySelect","propTypes","course","object","isRequired","onSubmit","func","onChange","errors"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;MAEQC,Q,GAAaF,I,CAAbE,Q;AACR,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,GAAG,EAAE;AAFP,CADmB,EAKnB;AACED,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,GAAG,EAAE;AAFP,CALmB,EASnB;AACED,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,GAAG,EAAE,GAFP;AAGEC,EAAAA,MAAM,EAAE;AAHV,CATmB,CAArB,C,CAcG;;AAEH,SAASC,cAAT,CAAwBC,IAAxB,EAA8BH,GAA9B,EAAmCI,QAAnC,EAA6C;AAC3C,SAAOD,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AACtB,QAAIA,IAAI,CAACN,GAAL,KAAaA,GAAjB,EAAsB;AACpB,+BAAYM,IAAZ;AAAkBF,QAAAA;AAAlB;AACD;;AACD,QAAIE,IAAI,CAACF,QAAT,EAAmB;AACjB,+BAAYE,IAAZ;AAAkBF,QAAAA,QAAQ,EAAEF,cAAc,CAACI,IAAI,CAACF,QAAN,EAAgBJ,GAAhB,EAAqBI,QAArB;AAA1C;AACD;;AAED,WAAOE,IAAP;AACD,GATM,CAAP;AAUD;;AAEA,SAASC,IAAT,CAAeC,KAAf,EAAuB;AAAA,oBACUd,QAAQ,CAACI,YAAD,CADlB;AAAA;AAAA,QACfW,QADe;AAAA,QACLC,WADK;;AAGtB,WAASC,UAAT,CAAoB;AAAEX,IAAAA,GAAF;AAAOI,IAAAA;AAAP,GAApB,EAAuC;AACrC,WAAO,IAAIQ,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAIT,QAAJ,EAAc;AACZS,QAAAA,OAAO;AACP;AACD;;AAEDC,MAAAA,UAAU,CAAC,MAAM;AACfJ,QAAAA,WAAW,CAACK,MAAM,IAChBb,cAAc,CAACa,MAAD,EAASf,GAAT,EAAc,CAC1B;AACED,UAAAA,KAAK,EAAE,YADT;AAEEC,UAAAA,GAAG,YAAKA,GAAL;AAFL,SAD0B,EAK1B;AACED,UAAAA,KAAK,EAAE,YADT;AAEEC,UAAAA,GAAG,YAAKA,GAAL;AAFL,SAL0B,CAAd,CADL,CAAX;AAYAa,QAAAA,OAAO;AACR,OAdS,EAcP,GAdO,CAAV;AAeD,KArBM,CAAP;AAsBD;;AAED,SAAO,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,UAAhB;AAA4B,IAAA,QAAQ,EAAEH,KAAK,CAACQ,QAA5C;AAAsD,IAAA,QAAQ,EAAEP,QAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAAA;AAEDF,IAAI,CAACU,SAAL,GAAiB;AACfC,EAAAA,MAAM,EAAEtB,SAAS,CAACuB,MAAV,CAAiBC,UADV;AAEfC,EAAAA,QAAQ,EAAEzB,SAAS,CAAC0B,IAAV,CAAeF,UAFV;AAGfG,EAAAA,QAAQ,EAAE3B,SAAS,CAAC0B,IAAV,CAAeF,UAHV;AAIfI,EAAAA,MAAM,EAAE5B,SAAS,CAACuB,MAAV,CAAiBC;AAJV,CAAjB;AASA,eAAeb,IAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Tree } from 'antd';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst { TreeNode } = Tree;\r\nconst initTreeDate = [\r\n  {\r\n    title: 'Expand to load',\r\n    key: '0',\r\n  },\r\n  {\r\n    title: 'Expand to load',\r\n    key: '1',\r\n  },\r\n  {\r\n    title: 'Tree Node',\r\n    key: '2',\r\n    isLeaf: true,\r\n  },\r\n]; // It's just a simple demo. You can use tree map to optimize update perf.\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return { ...node, children: updateTreeData(node.children, key, children) };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\n\r\n function Demo (props)  {\r\n  const [treeData, setTreeData] = useState(initTreeDate);\r\n\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setTreeData(origin =>\r\n          updateTreeData(origin, key, [\r\n            {\r\n              title: 'Child Node',\r\n              key: `${key}-0`,\r\n            },\r\n            {\r\n              title: 'Child Node',\r\n              key: `${key}-1`,\r\n            },\r\n          ]),\r\n        );\r\n        resolve();\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  return <Tree loadData={onLoadData} onSelect={props.mySelect} treeData={treeData} />;\r\n};\r\n\r\nDemo.propTypes = {\r\n  course: PropTypes.object.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\n\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}