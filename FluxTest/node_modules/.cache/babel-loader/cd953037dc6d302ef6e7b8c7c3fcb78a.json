{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\GeneralManage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\"; //const arree = ['yes'];\n\nexport function GeneralDisplayPage(props) {\n  const _useState = useState(['yes']),\n        _useState2 = _slicedToArray(_useState, 2),\n        Data = _useState2[0],\n        setData = _useState2[1];\n\n  let sType = props.GenKey;\n  setData(props.GenKey ? [props.GenKey] : ['not hello']);\n  useEffect(() => {\n    const GetSpecificEmployee = async () => {//setData(await getSpecificBranchByKey());\n    };\n\n    const GetSpecificBranch = async () => {//setData(await getSpecificBranchByKey());\n    };\n\n    switch (sType ? sType[0] : 'Employee') {\n      case 'Locale':\n      case 'Branch':\n        GetSpecificBranch();\n        break;\n\n      case 'Employee':\n        GetSpecificEmployee();\n        break;\n\n      default:\n        break;\n    }\n  }, [sType]);\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, Data[0]);\n}\nGeneralDisplayPage.propTypes = {\n  GenKey: PropTypes.string.isRequired\n};\nexport default GeneralDisplayPage;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\GeneralManage.js"],"names":["React","useState","useEffect","PropTypes","GeneralDisplayPage","props","Data","setData","sType","GenKey","GetSpecificEmployee","GetSpecificBranch","propTypes","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA,oBACdJ,QAAQ,CAAC,CAAC,KAAD,CAAD,CADM;AAAA;AAAA,QAC/BK,IAD+B;AAAA,QACzBC,OADyB;;AAEtC,MAAIC,KAAK,GAAGH,KAAK,CAACI,MAAlB;AACAF,EAAAA,OAAO,CAACF,KAAK,CAACI,MAAN,GAAc,CAACJ,KAAK,CAACI,MAAP,CAAd,GAA8B,CAAC,WAAD,CAA/B,CAAP;AACAP,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMQ,mBAAmB,GAAG,YAAY,CACtC;AACD,KAFD;;AAGA,UAAMC,iBAAiB,GAAG,YAAY,CACpC;AACD,KAFD;;AAIA,YAAQH,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAc,UAA3B;AACE,WAAK,QAAL;AACA,WAAK,QAAL;AACEG,QAAAA,iBAAiB;AACjB;;AACF,WAAK,UAAL;AACED,QAAAA,mBAAmB;AACnB;;AACA;AACC;AATL;AAWD,GApBQ,EAoBN,CAACF,KAAD,CApBM,CAAT;AAqBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGF,IAAI,CAAC,CAAD,CAFP,CADF;AAiBH;AAGDF,kBAAkB,CAACQ,SAAnB,GAA+B;AAC3BH,EAAAA,MAAM,EAAEN,SAAS,CAACU,MAAV,CAAiBC;AADE,CAA/B;AAIE,eAAeV,kBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//const arree = ['yes'];\r\nexport function GeneralDisplayPage(props) {\r\n    const [Data, setData] = useState(['yes']);\r\n    let sType = props.GenKey;\r\n    setData(props.GenKey? [props.GenKey]: ['not hello']);\r\n    useEffect(() => {\r\n        \r\n      const GetSpecificEmployee = async () => {\r\n        //setData(await getSpecificBranchByKey());\r\n      };\r\n      const GetSpecificBranch = async () => {\r\n        //setData(await getSpecificBranchByKey());\r\n      };\r\n\r\n      switch (sType ? sType[0] : 'Employee') {\r\n        case 'Locale':\r\n        case 'Branch':\r\n          GetSpecificBranch();\r\n          break;\r\n        case 'Employee':\r\n          GetSpecificEmployee();\r\n          break;\r\n          default:\r\n           break;\r\n      }\r\n    }, [sType]);\r\n    return (\r\n      <ul\r\n      >\r\n        {Data[0]}\r\n        {/* {Data.data.map(Values => (\r\n          <li\r\n            key={Values.name}\r\n          >\r\n            <p>{Values.name}</p>\r\n            <input value={Values.value} />\r\n          </li>\r\n        ))} */}\r\n      </ul>\r\n    );\r\n\r\n    \r\n  \r\n}\r\n\r\n\r\nGeneralDisplayPage.propTypes = {\r\n    GenKey: PropTypes.string.isRequired,\r\n  };\r\n\r\n  export default GeneralDisplayPage;"]},"metadata":{},"sourceType":"module"}