{"ast":null,"code":"const baseTree = [{\n  title: \"Branch1\",\n  key: \"1\",\n  isLeaf: false\n}, {\n  title: \"Branch2\",\n  key: \"2\",\n  isLeaf: false\n}, {\n  title: \"Branch3\",\n  key: \"3\",\n  isLeaf: false\n}, {\n  title: \"Branch4\",\n  key: \"4\",\n  isLeaf: false\n}];\nconst TreeKids = [{\n  title: \"Employee1\",\n  Parent: '1',\n  key: '1-1',\n  isLeaf: true\n}, {\n  title: \"Employee2\",\n  Parent: '1',\n  key: \"1-2\",\n  isLeaf: true\n}, {\n  title: \"Employee3\",\n  Parent: '1',\n  key: \"1-3\",\n  isLeaf: true\n}, {\n  title: \"Employee4\",\n  Parent: '2',\n  key: \"2-4\",\n  isLeaf: true\n}, {\n  title: \"Employee5\",\n  Parent: '2',\n  key: \"2-5\",\n  isLeaf: true\n}, {\n  title: \"Employee6\",\n  Parent: '4',\n  key: \"4-6\",\n  isLeaf: true\n}, {\n  title: \"Employee7\",\n  Parent: '4',\n  key: \"4-7\",\n  isLeaf: true\n}];\nexport function GetTreeData(Key) {\n  //let obj = JSON.parse(test);\n  //const result = obj.filter(x => x);\n  return baseTree;\n}\n;\nexport function GetTreeChildren(parentKey) {\n  debugger;\n  return TreeKids.filter(x => x.Parent === parentKey);\n}\n;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\MockData.js"],"names":["baseTree","title","key","isLeaf","TreeKids","Parent","GetTreeData","Key","GetTreeChildren","parentKey","filter","x"],"mappings":"AAEA,MAAMA,QAAQ,GAAG,CACjB;AAACC,EAAAA,KAAK,EAAE,SAAR;AAAmBC,EAAAA,GAAG,EAAE,GAAxB;AAA6BC,EAAAA,MAAM,EAAE;AAArC,CADiB,EAEjB;AAACF,EAAAA,KAAK,EAAE,SAAR;AAAmBC,EAAAA,GAAG,EAAE,GAAxB;AAA6BC,EAAAA,MAAM,EAAE;AAArC,CAFiB,EAGjB;AAACF,EAAAA,KAAK,EAAE,SAAR;AAAmBC,EAAAA,GAAG,EAAE,GAAxB;AAA6BC,EAAAA,MAAM,EAAE;AAArC,CAHiB,EAIjB;AAACF,EAAAA,KAAK,EAAE,SAAR;AAAmBC,EAAAA,GAAG,EAAE,GAAxB;AAA6BC,EAAAA,MAAM,EAAE;AAArC,CAJiB,CAAjB;AAMA,MAAMC,QAAQ,GAAG,CACjB;AAACH,EAAAA,KAAK,EAAE,WAAR;AAAqBI,EAAAA,MAAM,EAAE,GAA7B;AAAkCH,EAAAA,GAAG,EAAE,KAAvC;AAA8CC,EAAAA,MAAM,EAAE;AAAtD,CADiB,EAEjB;AAACF,EAAAA,KAAK,EAAE,WAAR;AAAqBI,EAAAA,MAAM,EAAE,GAA7B;AAAkCH,EAAAA,GAAG,EAAE,KAAvC;AAA8CC,EAAAA,MAAM,EAAE;AAAtD,CAFiB,EAGjB;AAACF,EAAAA,KAAK,EAAE,WAAR;AAAqBI,EAAAA,MAAM,EAAE,GAA7B;AAAkCH,EAAAA,GAAG,EAAE,KAAvC;AAA8CC,EAAAA,MAAM,EAAE;AAAtD,CAHiB,EAIjB;AAACF,EAAAA,KAAK,EAAE,WAAR;AAAqBI,EAAAA,MAAM,EAAE,GAA7B;AAAkCH,EAAAA,GAAG,EAAE,KAAvC;AAA8CC,EAAAA,MAAM,EAAE;AAAtD,CAJiB,EAKjB;AAACF,EAAAA,KAAK,EAAE,WAAR;AAAqBI,EAAAA,MAAM,EAAE,GAA7B;AAAkCH,EAAAA,GAAG,EAAE,KAAvC;AAA8CC,EAAAA,MAAM,EAAE;AAAtD,CALiB,EAMjB;AAACF,EAAAA,KAAK,EAAE,WAAR;AAAqBI,EAAAA,MAAM,EAAE,GAA7B;AAAkCH,EAAAA,GAAG,EAAE,KAAvC;AAA8CC,EAAAA,MAAM,EAAE;AAAtD,CANiB,EAOjB;AAACF,EAAAA,KAAK,EAAE,WAAR;AAAqBI,EAAAA,MAAM,EAAE,GAA7B;AAAkCH,EAAAA,GAAG,EAAE,KAAvC;AAA8CC,EAAAA,MAAM,EAAE;AAAtD,CAPiB,CAAjB;AAUA,OAAO,SAASG,WAAT,CAAqBC,GAArB,EAA0B;AAC7B;AAEA;AACA,SAAOP,QAAP;AACH;AAAA;AACD,OAAO,SAASQ,eAAT,CAAyBC,SAAzB,EAAmC;AACtC;AACA,SAAOL,QAAQ,CAACM,MAAT,CAAgBC,CAAC,IAAIA,CAAC,CAACN,MAAF,KAAaI,SAAlC,CAAP;AACH;AAAA","sourcesContent":["\r\n\r\nconst baseTree = [\r\n{title: \"Branch1\", key: \"1\", isLeaf: false},\r\n{title: \"Branch2\", key: \"2\", isLeaf: false},\r\n{title: \"Branch3\", key: \"3\", isLeaf: false},\r\n{title: \"Branch4\", key: \"4\", isLeaf: false},];\r\n\r\nconst TreeKids = [\r\n{title: \"Employee1\", Parent: '1', key: '1-1', isLeaf: true},\r\n{title: \"Employee2\", Parent: '1', key: \"1-2\", isLeaf: true},\r\n{title: \"Employee3\", Parent: '1', key: \"1-3\", isLeaf: true},\r\n{title: \"Employee4\", Parent: '2', key: \"2-4\", isLeaf: true},\r\n{title: \"Employee5\", Parent: '2', key: \"2-5\", isLeaf: true},\r\n{title: \"Employee6\", Parent: '4', key: \"4-6\", isLeaf: true},\r\n{title: \"Employee7\", Parent: '4', key: \"4-7\", isLeaf: true}]\r\n\r\n\r\nexport function GetTreeData(Key) {\r\n    //let obj = JSON.parse(test);\r\n    \r\n    //const result = obj.filter(x => x);\r\n    return baseTree;\r\n};\r\nexport function GetTreeChildren(parentKey){\r\n    debugger;\r\n    return TreeKids.filter(x => x.Parent === parentKey);\r\n};"]},"metadata":{},"sourceType":"module"}