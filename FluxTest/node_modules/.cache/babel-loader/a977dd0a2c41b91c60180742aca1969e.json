{"ast":null,"code":"import _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\GeneralManage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Layout, Button } from \"antd\";\nimport { getSpecificEmployeeByKey, getSpecificBranchByKey, PostData } from \"./MockData\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst validateMessages = {\n  required: \"This field is required!\",\n  types: {\n    email: \"Not a validate email!\",\n    number: \"Not a validate number!\"\n  },\n  number: {\n    range: \"Must be between ${min} and ${max}\"\n  }\n};\nconst defaultBranch = [{\n  key: \"0\",\n  data: [{\n    name: \"BranchCode\",\n    value: \"\"\n  }, {\n    name: \"BranchName\",\n    value: \"\"\n  }, {\n    name: \"BranchCategory\",\n    value: \"\"\n  }, {\n    name: \"ParentBranch\",\n    value: \"\"\n  }]\n}];\nconst defaultEmployee = [{\n  key: \"0\",\n  data: [{\n    name: \"EmployeeNumber\",\n    value: \"\"\n  }, {\n    name: \"EmployeeName\",\n    value: \"\"\n  }, {\n    name: \"EmployeeSurname\",\n    value: \"\"\n  }, {\n    name: \"EmployeeLastLoggedIn\",\n    value: \"\"\n  }, {\n    name: \"EmployeeID\",\n    value: \"\"\n  }, {\n    name: \"EmployeeBranch\",\n    value: [{\n      value: \"Branch1\"\n    }, {\n      value: \"Branch2\"\n    }, {\n      value: \"Branch3\"\n    }, {\n      value: \"Branch4\"\n    }, {\n      value: \"Branch5\"\n    }]\n  }]\n}];\nexport function GeneralDisplayPage(props) {\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  let Data = defaultBranch;\n\n  const onFinish = values => {\n    console.log(props.type, props.isEdit, values);\n    PostData(props.type, props.isEdit, values); //post it\n  };\n\n  if (props.GenKey !== undefined) {\n    switch (props.type) {\n      case \"Locale\":\n      case \"Branch\":\n        Data = props.isEdit ? getSpecificBranchByKey(props.GenKey) : defaultBranch;\n        break;\n\n      case \"Employee\":\n        Data = props.isEdit ? getSpecificEmployeeByKey(props.GenKey) : defaultEmployee;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  Data[0].data.map(x => form.setFieldsValue({\n    [x.name]: x.value\n  }));\n  useEffect(() => {}, [props.GenKey, props.isEdit, props.type]);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, Data.map(memes => {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, props.isEdit ? \"Editing for \".concat(props.GenKey) : \"Adding new \".concat(props.type)), React.createElement(Form, Object.assign({\n      form: form\n    }, layout, {\n      name: \"nest-messages\",\n      onFinish: onFinish,\n      validateMessages: validateMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), memes.data.map(field => {\n      return React.createElement(Form.Item, {\n        label: field.name,\n        name: field.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, field.isArray() ? \"yes\" : \"no\", React.createElement(Input, {\n        label: field.name,\n        value: {\n          value: \"test\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }));\n    }), React.createElement(Form.Item, {\n      wrapperCol: _objectSpread({}, layout.wrapperCol, {\n        offset: 8\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Submit\"))));\n  }));\n}\nGeneralDisplayPage.propTypes = {\n  GenKey: PropTypes.string.isRequired,\n  isEdit: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default GeneralDisplayPage;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\GeneralManage.js"],"names":["React","useState","useEffect","PropTypes","Form","Input","Layout","Button","getSpecificEmployeeByKey","getSpecificBranchByKey","PostData","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","defaultBranch","key","data","name","value","defaultEmployee","GeneralDisplayPage","props","useForm","form","Data","onFinish","values","console","log","type","isEdit","GenKey","undefined","map","x","setFieldsValue","memes","field","isArray","offset","propTypes","string","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, Layout, Button } from \"antd\";\r\n\r\nimport {\r\n  getSpecificEmployeeByKey,\r\n  getSpecificBranchByKey,\r\n  PostData\r\n} from \"./MockData\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8\r\n  },\r\n  wrapperCol: {\r\n    span: 16\r\n  }\r\n};\r\nconst validateMessages = {\r\n  required: \"This field is required!\",\r\n  types: {\r\n    email: \"Not a validate email!\",\r\n    number: \"Not a validate number!\"\r\n  },\r\n  number: {\r\n    range: \"Must be between ${min} and ${max}\"\r\n  }\r\n};\r\nconst defaultBranch = [\r\n  {\r\n    key: \"0\",\r\n    data: [\r\n      {\r\n        name: \"BranchCode\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"BranchName\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"BranchCategory\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"ParentBranch\",\r\n        value: \"\"\r\n      }\r\n    ]\r\n  }\r\n];\r\nconst defaultEmployee = [\r\n  {\r\n    key: \"0\",\r\n    data: [\r\n      {\r\n        name: \"EmployeeNumber\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeName\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeSurname\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeLastLoggedIn\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeID\",\r\n        value: \"\"\r\n      },\r\n      {\r\n        name: \"EmployeeBranch\",\r\n        value: [\r\n          { value: \"Branch1\" },\r\n          { value: \"Branch2\" },\r\n          { value: \"Branch3\" },\r\n          { value: \"Branch4\" },\r\n          { value: \"Branch5\" }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\nexport function GeneralDisplayPage(props) {\r\n  const [form] = Form.useForm();\r\n\r\n  let Data = defaultBranch;\r\n\r\n  const onFinish = values => {\r\n    console.log(props.type, props.isEdit, values);\r\n    PostData(props.type, props.isEdit, values);\r\n    //post it\r\n  };\r\n  if (props.GenKey !== undefined) {\r\n    switch (props.type) {\r\n      case \"Locale\":\r\n      case \"Branch\":\r\n        Data = props.isEdit\r\n          ? getSpecificBranchByKey(props.GenKey)\r\n          : defaultBranch;\r\n        break;\r\n      case \"Employee\":\r\n        Data = props.isEdit\r\n          ? getSpecificEmployeeByKey(props.GenKey)\r\n          : defaultEmployee;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  Data[0].data.map(x =>\r\n    form.setFieldsValue({\r\n      [x.name]: x.value\r\n    })\r\n  );\r\n  useEffect(() => {}, [props.GenKey, props.isEdit, props.type]);\r\n  return (\r\n    <Layout>\r\n      {Data.map(memes => {\r\n        return (\r\n          <>\r\n            <h2>\r\n              {props.isEdit\r\n                ? `Editing for ${props.GenKey}`\r\n                : `Adding new ${props.type}`}\r\n            </h2>\r\n            <Form\r\n              form={form}\r\n              {...layout}\r\n              name=\"nest-messages\"\r\n              onFinish={onFinish}\r\n              validateMessages={validateMessages}\r\n            >\r\n              {memes.data.map(field => {\r\n                return (\r\n                  <Form.Item label={field.name} name={field.name}>\r\n                    {field.isArray() ? \"yes\" : \"no\"}\r\n                    <Input label={field.name} value={{ value: \"test\" }} />\r\n                  </Form.Item>\r\n                );\r\n              })}\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </>\r\n        );\r\n      })}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nGeneralDisplayPage.propTypes = {\r\n  GenKey: PropTypes.string.isRequired,\r\n  isEdit: PropTypes.bool.isRequired,\r\n  type: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GeneralDisplayPage;\r\n"]},"metadata":{},"sourceType":"module"}