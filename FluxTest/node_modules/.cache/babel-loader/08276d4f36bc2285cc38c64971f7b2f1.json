{"ast":null,"code":"import _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\TreeCover.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\"; //import { GetTreeData, GetTreeChildren } from \"./MockData\";\n\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\nimport { TreeTree } from \"./Tree\";\nimport { TreeSearch } from \"./TreeSearch\"; //fixed calls\n\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\n\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\n\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\n\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\n\nconst getBranchInfoCall = \"\"; //link to get all branch info\n\nconst updateBranchCall = \"\"; //link to update the branch\n\nconst updateEmployeeCall = \"\"; //link to update the employee\n\nexport function BranchTree(props) {\n  //hooks\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setisLoading = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        search = _useState6[0],\n        setSearch = _useState6[1];\n\n  function TreeUpdate(e) {\n    if (!e) setTreeData([]);else setTreeData(e);\n  }\n\n  async function UpdateDrag(dragNode, node) {\n    //the two nodes, need the info of dragNode, and the branchKey of node\n    const newBranch = node.key; //see if dragnode is a branch or employee\n\n    if (dragNode.isLeaf) {\n      //is employee\n      //get info of employee\n      //update employee\n      let url = \"\".concat(props.getEmployeeInfoCall).concat(dragNode.key);\n      let Employee = [];\n      let response = await fetch(url, {\n        method: \"GET\"\n      });\n      let json = await response.json();\n      json.map(Main => {\n        Employee.push({\n          empId: 0,\n          empIsActive: true,\n          empBranchId: newBranch,\n          empChannelId: 0,\n          empEmail: \"\",\n          empFirstName: \"\",\n          empLastName: \"\",\n          empBankerRoleId: 0,\n          empStaffNo: \"\"\n        });\n      });\n      url = \"\".concat(props.updateEmployeeCall).concat(dragNode.key);\n      let post = [];\n      response = await fetch(url, {\n        method: \"POST\"\n      });\n      json = await response.json();\n    } else {\n      //is branch\n      //get info of branch\n      //update branch\n      const Id = 0;\n      const BranchCode = 0;\n      const BranchName = \"\";\n      const BranchCategoryId = 0;\n      const ChannelId = 0;\n      const CanReceiveSale = true;\n      const ParentBranchId = 0; //or null\n\n      const RegionId = 0; //or null\n\n      const IsActive = true;\n      const IsPostBox = true;\n      const OldCode = 0; //or null\n    }\n  } //reset tree data each time rootBranch gets updated\n\n\n  useEffect(() => {}, [props.rootBranch]);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(TreeSearch, {\n    searchURLCall: searchURLCall,\n    UpdateTree: TreeUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(TreeTree, {\n    data: treeData,\n    rootBranch: \"0\",\n    UpdateDrag: UpdateDrag,\n    onRightClick: props.onRightClick,\n    onSelect: props.onSelect,\n    rootURLCall: rootURLCall,\n    childURLCall: childURLCall,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })));\n}\nBranchTree.propTypes = {\n  rootBranch: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired,\n  isBranch: PropTypes.bool,\n  //leave for now\n  form: PropTypes.bool //leave for now\n\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\TreeCover.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","TreeTree","TreeSearch","rootURLCall","childURLCall","searchURLCall","getEmployeeInfoCall","getBranchInfoCall","updateBranchCall","updateEmployeeCall","BranchTree","props","treeData","setTreeData","isLoading","setisLoading","search","setSearch","TreeUpdate","e","UpdateDrag","dragNode","node","newBranch","key","isLeaf","url","Employee","response","fetch","method","json","map","Main","push","empId","empIsActive","empBranchId","empChannelId","empEmail","empFirstName","empLastName","empBankerRoleId","empStaffNo","post","Id","BranchCode","BranchName","BranchCategoryId","ChannelId","CanReceiveSale","ParentBranchId","RegionId","IsActive","IsPostBox","OldCode","rootBranch","onRightClick","onSelect","propTypes","string","isRequired","func","isBranch","bool","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\n//import { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\nimport { TreeTree } from \"./Tree\";\r\nimport { TreeSearch } from \"./TreeSearch\";\r\n\r\n//fixed calls\r\nconst rootURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the root branches\r\nconst childURLCall = \"https://localhost:5001/api/trees/\"; //link to getting the children\r\nconst searchURLCall = \"https://localhost:5001/api/tree/\"; //link to search\r\nconst getEmployeeInfoCall = \"\"; //link to get all employee info\r\nconst getBranchInfoCall = \"\"; //link to get all branch info\r\nconst updateBranchCall = \"\"; //link to update the branch\r\nconst updateEmployeeCall = \"\"; //link to update the employee\r\n\r\nexport function BranchTree(props) {\r\n  //hooks\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  function TreeUpdate(e) {\r\n    if (!e) setTreeData([]);\r\n    else setTreeData(e);\r\n  }\r\n\r\n  async function UpdateDrag(dragNode, node) {\r\n    //the two nodes, need the info of dragNode, and the branchKey of node\r\n    const newBranch = node.key;\r\n    //see if dragnode is a branch or employee\r\n    if (dragNode.isLeaf) {\r\n      //is employee\r\n      //get info of employee\r\n      //update employee\r\n      let url = `${props.getEmployeeInfoCall}${dragNode.key}`;\r\n      let Employee = [];\r\n      let response = await fetch(url, {\r\n        method: \"GET\",\r\n      });\r\n      let json = await response.json();\r\n      json.map((Main) => {\r\n        Employee.push({\r\n          empId: 0,\r\n          empIsActive: true,\r\n          empBranchId: newBranch,\r\n          empChannelId: 0,\r\n          empEmail: \"\",\r\n          empFirstName: \"\",\r\n          empLastName: \"\",\r\n          empBankerRoleId: 0,\r\n          empStaffNo: \"\",\r\n        });\r\n      });\r\n\r\n      url = `${props.updateEmployeeCall}${dragNode.key}`;\r\n      let post = [];\r\n      response = await fetch(url, {\r\n        method: \"POST\",\r\n      });\r\n      json = await response.json();\r\n    } else {\r\n      //is branch\r\n      //get info of branch\r\n      //update branch\r\n      const Id = 0;\r\n      const BranchCode = 0;\r\n      const BranchName = \"\";\r\n      const BranchCategoryId = 0;\r\n      const ChannelId = 0;\r\n      const CanReceiveSale = true;\r\n      const ParentBranchId = 0; //or null\r\n      const RegionId = 0; //or null\r\n      const IsActive = true;\r\n      const IsPostBox = true;\r\n      const OldCode = 0; //or null\r\n    }\r\n  }\r\n\r\n  //reset tree data each time rootBranch gets updated\r\n  useEffect(() => {}, [props.rootBranch]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Spin spinning={isLoading}>\r\n        <TreeSearch searchURLCall={searchURLCall} UpdateTree={TreeUpdate} />\r\n\r\n        <TreeTree\r\n          data={treeData}\r\n          rootBranch=\"0\"\r\n          UpdateDrag={UpdateDrag}\r\n          onRightClick={props.onRightClick}\r\n          onSelect={props.onSelect}\r\n          rootURLCall={rootURLCall}\r\n          childURLCall={childURLCall}\r\n        />\r\n      </Spin>\r\n    </Layout>\r\n  );\r\n}\r\nBranchTree.propTypes = {\r\n  rootBranch: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onRightClick: PropTypes.func.isRequired,\r\n  isBranch: PropTypes.bool, //leave for now\r\n  form: PropTypes.bool, //leave for now\r\n};\r\n"]},"metadata":{},"sourceType":"module"}