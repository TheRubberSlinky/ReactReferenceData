{"ast":null,"code":"import _objectSpread from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\FluxTest\\\\src\\\\components\\\\Tree\\\\Tree.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\"; //import { GetTreeData, GetTreeChildren } from \"./MockData\";\n\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\"; //constants\n\nconst Search = Input.Search; //fixed layouts\n\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n}; //fixed pre load data\n\nconst baseTree = [{\n  title: \"Branch1\",\n  key: \"1\",\n  isLeaf: false\n}];\nexport function TreeTree(props) {\n  //hooks\n  const _useState = useState(baseTree),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        RCData = _useState4[0],\n        setRCData = _useState4[1]; //update with new children\n\n\n  function updateTreeData(list, key, children) {\n    return list.map(node => {\n      if (node.key === key) {\n        return _objectSpread({}, node, {\n          children\n        });\n      }\n\n      if (node.children) {\n        return _objectSpread({}, node, {\n          children: updateTreeData(node.children, key, children)\n        });\n      }\n\n      return node;\n    });\n  } //call to get root object\n\n\n  function GetRoot() {\n    let obj = [];\n    fetch(props.rootURLCall, {\n      method: \"GET\",\n      headers: new Headers({\n        Accept: \"application/vnd.github.cloak-preview\"\n      })\n    }).then(res => res.json()).then(response => {\n      response.map(Main => {\n        obj.push({\n          title: Main.name,\n          key: Main.id,\n          icon: React.createElement(HomeOutlined, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }),\n          isLeaf: false\n        }); //   obj.push({\n        //     //update this to represent his code\n        //     title: Main.data[0].value,\n        //     key: Main.data[1].value,\n        //     icon:\n        //       Main.data[2].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\n        //     isLeaf: Main.data[2].value === \"0\" ? false : true,\n        //   });\n      });\n      setTreeData(obj);\n    }).catch(error => {\n      console.log(error);\n      return obj;\n    });\n  } //async call to get children objects\n\n\n  async function GetChildNodes(ParentKey) {\n    const url = \"\".concat(props.childURLCall).concat(ParentKey);\n    let obj = [];\n    const response = await fetch(url, {\n      method: \"GET\"\n    });\n    const json = await response.json();\n    json.map(Main => {\n      obj.push({\n        //Update this to represent his code\n        title: Main.data[2].value,\n        key: Main.data[1].value,\n        icon: Main.data[3].value === \"0\" ? React.createElement(HomeOutlined, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }) : React.createElement(UserOutlined, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }),\n        isLeaf: Main.data[3].value === \"0\" ? false : true\n      });\n    });\n    return obj;\n  } //async function to find new children\n\n\n  async function onLoadData({\n    key,\n    children\n  }) {\n    const childNodes = await GetChildNodes(key);\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTreeData(origin => updateTreeData(origin, key, childNodes));\n      resolve();\n    });\n  } //reset tree data each time rootBranch gets updated\n\n\n  useEffect(() => {\n    if (props.data.length !== 0) {\n      setTreeData(props.data);\n    } else {\n      setTreeData(GetRoot());\n    }\n  }, [props.data]); //Right click menu\n\n  const menu = React.createElement(Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, !RCData.isLeaf ? React.createElement(Menu.Item, {\n    key: \"1\",\n    onClick: () => props.onRightClick(\"Branch\", RCData.key),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Add new Branch\") : \"\", !RCData.isLeaf ? React.createElement(Menu.Item, {\n    key: \"2\",\n    onClick: () => props.onRightClick(\"Employee\", RCData.key),\n    value: \"Employee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Add new Employee\") : \"\"); //on right click, open a dropdown at that location\n\n  const onRC = event => {\n    setRCData(event.node);\n    console.log(event);\n  };\n\n  const onDragEnter = info => {\n    console.log(info);\n  }; //on drop, make a popup ask if they are sure they want to move X to Y\n\n\n  const onDrop = info => {\n    if (info.node.isLeaf) {\n      return;\n    } //console.log(info.node);\n    //console.log(info.dragNode);\n\n\n    debugger;\n    const dPos = info.node.props.pos.split(\"-\");\n    const test = info.dragNode.props.pos.split(\"-\"); //ensure the node is being dragged to a new item, instead of the same position\n\n    alert(test);\n    if (!window.confirm(\"Are you sure you wish to move \".concat(info.dragNode.title, \" into \").concat(info.node.title))) return;\n    console.log(\"DragNode: \".concat(info.dragNode.title, \"   Node: \").concat(info.node.title));\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split(\"-\");\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n\n    const data = [...treeData]; // Find dragObject\n\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (!info.dropToGap) {\n      // Drop on the content\n      loop(data, dropKey, item => {\n        item.children = item.children || []; // where to insert\n\n        item.children.push(dragObj);\n      });\n    } else if ((info.node.props.children || []).length > 0 && // Has children\n    info.node.props.expanded && // Is expanded\n    dropPosition === 1 // On the bottom gap\n    ) {\n        loop(data, dropKey, item => {\n          item.children = item.children || []; // where to insert\n\n          item.children.unshift(dragObj);\n        });\n      } else {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    }\n\n    props.UpdateDrag(info.dragNode, info.node); //update actual system as well, if it works then set the tree data\n\n    setTreeData(data);\n  };\n\n  return React.createElement(Dropdown, {\n    overlay: menu,\n    trigger: [\"contextMenu\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(Tree, Object.assign({}, layout, {\n    showIcon: true,\n    style: {\n      height: \"auto\",\n      minHeight: \"570px\"\n    },\n    loadData: onLoadData,\n    onSelect: props.onSelect,\n    treeData: treeData,\n    defaultExpandAll: false,\n    draggable: true,\n    onDragEnter: onDragEnter,\n    onDrop: onDrop,\n    onRightClick: onRC,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }))));\n}\nTreeTree.propTypes = {\n  data: PropTypes.array.isRequired,\n  rootURLCall: PropTypes.string.isRequired,\n  childURLCall: PropTypes.string.isRequired,\n  UpdateDrag: PropTypes.func.isRequired,\n  rootBranch: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired,\n  isBranch: PropTypes.bool,\n  //leave for now\n  form: PropTypes.bool //leave for now\n\n};","map":{"version":3,"sources":["E:\\TRISTAN\\Repos\\ReactReferenceData\\FluxTest\\src\\components\\Tree\\Tree.js"],"names":["React","useEffect","useState","Tree","Menu","Dropdown","Spin","Layout","Input","PropTypes","UserOutlined","HomeOutlined","Search","layout","labelCol","span","wrapperCol","baseTree","title","key","isLeaf","TreeTree","props","treeData","setTreeData","RCData","setRCData","updateTreeData","list","children","map","node","GetRoot","obj","fetch","rootURLCall","method","headers","Headers","Accept","then","res","json","response","Main","push","name","id","icon","catch","error","console","log","GetChildNodes","ParentKey","url","childURLCall","data","value","onLoadData","childNodes","Promise","resolve","origin","length","menu","onRightClick","onRC","event","onDragEnter","info","onDrop","dPos","pos","split","test","dragNode","alert","window","confirm","dropKey","eventKey","dragKey","dropPos","dropPosition","Number","loop","callback","forEach","item","index","arr","dragObj","splice","dropToGap","expanded","unshift","ar","i","UpdateDrag","height","minHeight","onSelect","propTypes","array","isRequired","string","func","rootBranch","isBranch","bool","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tree, Menu, Dropdown, Spin, Layout, Input } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\n//import { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\r\n\r\n//constants\r\nconst Search = Input.Search;\r\n\r\n//fixed layouts\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\n\r\n//fixed pre load data\r\nconst baseTree = [{ title: \"Branch1\", key: \"1\", isLeaf: false }];\r\n\r\nexport function TreeTree(props) {\r\n  //hooks\r\n  const [treeData, setTreeData] = useState(baseTree);\r\n  const [RCData, setRCData] = useState([]);\r\n\r\n  //update with new children\r\n  function updateTreeData(list, key, children) {\r\n    return list.map((node) => {\r\n      if (node.key === key) {\r\n        return { ...node, children };\r\n      }\r\n      if (node.children) {\r\n        return {\r\n          ...node,\r\n          children: updateTreeData(node.children, key, children),\r\n        };\r\n      }\r\n      return node;\r\n    });\r\n  }\r\n\r\n  //call to get root object\r\n  function GetRoot() {\r\n    let obj = [];\r\n    fetch(props.rootURLCall, {\r\n      method: \"GET\",\r\n      headers: new Headers({\r\n        Accept: \"application/vnd.github.cloak-preview\",\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        response.map((Main) => {\r\n          obj.push({\r\n            title: Main.name,\r\n            key: Main.id,\r\n            icon: <HomeOutlined />,\r\n            isLeaf: false,\r\n          });\r\n\r\n          //   obj.push({\r\n          //     //update this to represent his code\r\n          //     title: Main.data[0].value,\r\n          //     key: Main.data[1].value,\r\n          //     icon:\r\n          //       Main.data[2].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\r\n          //     isLeaf: Main.data[2].value === \"0\" ? false : true,\r\n          //   });\r\n        });\r\n        setTreeData(obj);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        return obj;\r\n      });\r\n  }\r\n\r\n  //async call to get children objects\r\n  async function GetChildNodes(ParentKey) {\r\n    const url = `${props.childURLCall}${ParentKey}`;\r\n    let obj = [];\r\n    const response = await fetch(url, {\r\n      method: \"GET\",\r\n    });\r\n    const json = await response.json();\r\n    json.map((Main) => {\r\n      obj.push({\r\n        //Update this to represent his code\r\n        title: Main.data[2].value,\r\n        key: Main.data[1].value,\r\n        icon: Main.data[3].value === \"0\" ? <HomeOutlined /> : <UserOutlined />,\r\n        isLeaf: Main.data[3].value === \"0\" ? false : true,\r\n      });\r\n    });\r\n    return obj;\r\n  }\r\n\r\n  //async function to find new children\r\n  async function onLoadData({ key, children }) {\r\n    const childNodes = await GetChildNodes(key);\r\n    return new Promise((resolve) => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n      setTreeData((origin) => updateTreeData(origin, key, childNodes));\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  //reset tree data each time rootBranch gets updated\r\n  useEffect(() => {\r\n    if (props.data.length !== 0) {\r\n      setTreeData(props.data);\r\n    } else {\r\n      setTreeData(GetRoot());\r\n    }\r\n  }, [props.data]);\r\n\r\n  //Right click menu\r\n  const menu = (\r\n    <Menu>\r\n      {/* see if it is a branch, if it is, allow add new branch and add new employee */}\r\n      {!RCData.isLeaf ? (\r\n        <Menu.Item\r\n          key=\"1\"\r\n          onClick={() => props.onRightClick(\"Branch\", RCData.key)}\r\n        >\r\n          Add new Branch\r\n        </Menu.Item>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {!RCData.isLeaf ? (\r\n        <Menu.Item\r\n          key=\"2\"\r\n          onClick={() => props.onRightClick(\"Employee\", RCData.key)}\r\n          value=\"Employee\"\r\n        >\r\n          Add new Employee\r\n        </Menu.Item>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n  //on right click, open a dropdown at that location\r\n  const onRC = (event) => {\r\n    setRCData(event.node);\r\n    console.log(event);\r\n  };\r\n\r\n  const onDragEnter = (info) => {\r\n    console.log(info);\r\n  };\r\n  //on drop, make a popup ask if they are sure they want to move X to Y\r\n  const onDrop = (info) => {\r\n    if (info.node.isLeaf) {\r\n      return;\r\n    }\r\n    //console.log(info.node);\r\n    //console.log(info.dragNode);\r\n    debugger;\r\n    const dPos = info.node.props.pos.split(\"-\");\r\n    const test = info.dragNode.props.pos.split(\"-\");\r\n    //ensure the node is being dragged to a new item, instead of the same position\r\n    alert(test);\r\n    if (\r\n      !window.confirm(\r\n        `Are you sure you wish to move ${info.dragNode.title} into ${info.node.title}`\r\n      )\r\n    )\r\n      return;\r\n    console.log(`DragNode: ${info.dragNode.title}   Node: ${info.node.title}`);\r\n    const dropKey = info.node.props.eventKey;\r\n    const dragKey = info.dragNode.props.eventKey;\r\n    const dropPos = info.node.props.pos.split(\"-\");\r\n    const dropPosition =\r\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n\r\n    const loop = (data, key, callback) => {\r\n      data.forEach((item, index, arr) => {\r\n        if (item.key === key) {\r\n          return callback(item, index, arr);\r\n        }\r\n        if (item.children) {\r\n          return loop(item.children, key, callback);\r\n        }\r\n      });\r\n    };\r\n    const data = [...treeData];\r\n\r\n    // Find dragObject\r\n    let dragObj;\r\n    loop(data, dragKey, (item, index, arr) => {\r\n      arr.splice(index, 1);\r\n      dragObj = item;\r\n    });\r\n\r\n    if (!info.dropToGap) {\r\n      // Drop on the content\r\n      loop(data, dropKey, (item) => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.push(dragObj);\r\n      });\r\n    } else if (\r\n      (info.node.props.children || []).length > 0 && // Has children\r\n      info.node.props.expanded && // Is expanded\r\n      dropPosition === 1 // On the bottom gap\r\n    ) {\r\n      loop(data, dropKey, (item) => {\r\n        item.children = item.children || [];\r\n        // where to insert\r\n        item.children.unshift(dragObj);\r\n      });\r\n    } else {\r\n      let ar;\r\n      let i;\r\n      loop(data, dropKey, (item, index, arr) => {\r\n        ar = arr;\r\n        i = index;\r\n      });\r\n      if (dropPosition === -1) {\r\n        ar.splice(i, 0, dragObj);\r\n      } else {\r\n        ar.splice(i + 1, 0, dragObj);\r\n      }\r\n    }\r\n\r\n    props.UpdateDrag(info.dragNode, info.node);\r\n    //update actual system as well, if it works then set the tree data\r\n    setTreeData(data);\r\n  };\r\n\r\n  return (\r\n    <Dropdown overlay={menu} trigger={[\"contextMenu\"]}>\r\n      <div>\r\n        <Tree\r\n          {...layout}\r\n          showIcon={true}\r\n          style={{ height: \"auto\", minHeight: \"570px\" }}\r\n          loadData={onLoadData}\r\n          onSelect={props.onSelect}\r\n          treeData={treeData}\r\n          defaultExpandAll={false}\r\n          draggable\r\n          onDragEnter={onDragEnter}\r\n          onDrop={onDrop}\r\n          onRightClick={onRC}\r\n        />\r\n      </div>\r\n    </Dropdown>\r\n  );\r\n}\r\nTreeTree.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  rootURLCall: PropTypes.string.isRequired,\r\n  childURLCall: PropTypes.string.isRequired,\r\n  UpdateDrag: PropTypes.func.isRequired,\r\n  rootBranch: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onRightClick: PropTypes.func.isRequired,\r\n  isBranch: PropTypes.bool, //leave for now\r\n  form: PropTypes.bool, //leave for now\r\n};\r\n"]},"metadata":{},"sourceType":"module"}