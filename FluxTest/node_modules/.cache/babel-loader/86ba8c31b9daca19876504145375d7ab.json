{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { Tree, Button, Popover, Form } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\nimport axios from \"axios\"; //import { onRightClick } from \"./popup\";\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction GetChildNodes(ParentKey) {\n  let children = GetTreeChildren(ParentKey);\n  return children;\n}\n\nexport function Demo(props) {\n  const _useState = useState({\n    hits: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  const url = \"https://localhost:5001/api/trees\";\n  let DataTree = [];\n  useEffect(() => {\n    async function fetchData() {\n      let obj = [];\n      await axios.get(url).then(response => {\n        console.log(response);\n        response.data.map(Main => {\n          obj.push({\n            title: Main.data[0].value,\n            key: Main.data[1].value,\n            isLeaf: Main.data[2].value\n          });\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n      return obj;\n    }\n\n    DataTree = fetchData();\n  });\n  const layout = {\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16\n    }\n  };\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\n      resolve();\n    });\n  } // const onSelect = (selectedKeys, otherValue) => {\n  //   debugger;\n  //   console.log(selectedKeys);\n  //   console.log(otherValue);\n  // };\n\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Tree, Object.assign({}, layout, {\n    style: {\n      height: \"auto\",\n      minHeight: \"570px\"\n    },\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    onClick: () => props.myClick(\"Branch\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Add new Branch\"), React.createElement(Button, {\n    type: \"button\",\n    onClick: () => props.myClick(\"Employee\"),\n    value: \"Employee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Add new Employee\")));\n} //TODO: move the keys away from a delimited string\n//      add popup instead of buttons to add\n\nDemo.propTypes = {\n  mySelect: PropTypes.func.isRequired,\n  myClick: PropTypes.func.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useEffect","useState","Fragment","Tree","Button","Popover","Form","PropTypes","GetTreeData","GetTreeChildren","axios","updateTreeData","list","key","children","map","node","GetChildNodes","ParentKey","Demo","props","hits","treeData","setTreeData","url","DataTree","fetchData","obj","get","then","response","console","log","data","Main","push","title","value","isLeaf","catch","error","layout","labelCol","span","wrapperCol","tailLayout","offset","onLoadData","Promise","resolve","origin","height","minHeight","mySelect","myClick","propTypes","func","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,IAAhC,QAA4C,MAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,YAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,GAA9B,EAAmCC,QAAnC,EAA6C;AAC3C,SAAOF,IAAI,CAACG,GAAL,CAASC,IAAI,IAAI;AACtB,QAAIA,IAAI,CAACH,GAAL,KAAaA,GAAjB,EAAsB;AACpB,+BAAYG,IAAZ;AAAkBF,QAAAA;AAAlB;AACD;;AACD,QAAIE,IAAI,CAACF,QAAT,EAAmB;AACjB,+BACKE,IADL;AAEEF,QAAAA,QAAQ,EAAEH,cAAc,CAACK,IAAI,CAACF,QAAN,EAAgBD,GAAhB,EAAqBC,QAArB;AAF1B;AAID;;AAED,WAAOE,IAAP;AACD,GAZM,CAAP;AAaD;;AACD,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,MAAIJ,QAAQ,GAAGL,eAAe,CAACS,SAAD,CAA9B;AACA,SAAOJ,QAAP;AACD;;AAED,OAAO,SAASK,IAAT,CAAcC,KAAd,EAAqB;AAAA,oBACMnB,QAAQ,CAAC;AAAEoB,IAAAA,IAAI,EAAE;AAAR,GAAD,CADd;AAAA;AAAA,QACnBC,QADmB;AAAA,QACTC,WADS;;AAE1B,QAAMC,GAAG,qCAAT;AAEA,MAAIC,QAAQ,GAAG,EAAf;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe0B,SAAf,GAA2B;AACzB,UAAIC,GAAG,GAAG,EAAV;AACA,YAAMjB,KAAK,CACRkB,GADG,CACCJ,GADD,EAEHK,IAFG,CAEEC,QAAQ,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAA,QAAAA,QAAQ,CAACG,IAAT,CAAclB,GAAd,CAAkBmB,IAAI,IAAI;AACxBP,UAAAA,GAAG,CAACQ,IAAJ,CAAS;AACPC,YAAAA,KAAK,EAAEF,IAAI,CAACD,IAAL,CAAU,CAAV,EAAaI,KADb;AAEPxB,YAAAA,GAAG,EAAEqB,IAAI,CAACD,IAAL,CAAU,CAAV,EAAaI,KAFX;AAGPC,YAAAA,MAAM,EAAEJ,IAAI,CAACD,IAAL,CAAU,CAAV,EAAaI;AAHd,WAAT;AAKD,SAND;AAOD,OAXG,EAYHE,KAZG,CAYGC,KAAK,IAAI;AACdT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD,OAdG,CAAN;AAeA,aAAOb,GAAP;AACD;;AACDF,IAAAA,QAAQ,GAAGC,SAAS,EAApB;AACD,GArBQ,CAAT;AAsBA,QAAMe,MAAM,GAAG;AACbC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAE;AADE,KADG;AAIbC,IAAAA,UAAU,EAAE;AACVD,MAAAA,IAAI,EAAE;AADI;AAJC,GAAf;AAQA,QAAME,UAAU,GAAG;AACjBD,IAAAA,UAAU,EAAE;AACVE,MAAAA,MAAM,EAAE,CADE;AAEVH,MAAAA,IAAI,EAAE;AAFI;AADK,GAAnB;;AAMA,WAASI,UAAT,CAAoB;AAAElC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAApB,EAAuC;AACrC,WAAO,IAAIkC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAInC,QAAJ,EAAc;AACZmC,QAAAA,OAAO;AACP;AACD;;AAED1B,MAAAA,WAAW,CAAC2B,MAAM,IAAIvC,cAAc,CAACuC,MAAD,EAASrC,GAAT,EAAcI,aAAa,CAACJ,GAAD,CAA3B,CAAzB,CAAX;AACAoC,MAAAA,OAAO;AACR,KARM,CAAP;AASD,GAnDyB,CAqD1B;AACA;AACA;AACA;AACA;;;AAEA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,IAAD,oBACMR,MADN;AAEE,IAAA,KAAK,EAAE;AAAEU,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAFT;AAGE,IAAA,QAAQ,EAAEL,UAHZ;AAIE,IAAA,QAAQ,EAAE3B,KAAK,CAACiC,QAJlB;AAKE,IAAA,QAAQ,EAAE/B,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARF,EAeE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE,MAAMF,KAAK,CAACkC,OAAN,CAAc,QAAd,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAIE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE,MAAMlC,KAAK,CAACkC,OAAN,CAAc,UAAd,CAFjB;AAGE,IAAA,KAAK,EAAC,UAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF,CAfF,CADF;AA8BD,C,CAED;AACA;;AACAnC,IAAI,CAACoC,SAAL,GAAiB;AACfF,EAAAA,QAAQ,EAAE9C,SAAS,CAACiD,IAAV,CAAeC,UADV;AAEfH,EAAAA,OAAO,EAAE/C,SAAS,CAACiD,IAAV,CAAeC;AAFT,CAAjB;AAKA,eAAetC,IAAf","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Tree, Button, Popover, Form } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport axios from \"axios\";\r\n//import { onRightClick } from \"./popup\";\r\n\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return {\r\n        ...node,\r\n        children: updateTreeData(node.children, key, children)\r\n      };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\nfunction GetChildNodes(ParentKey) {\r\n  let children = GetTreeChildren(ParentKey);\r\n  return children;\r\n}\r\n\r\nexport function Demo(props) {\r\n  const [treeData, setTreeData] = useState({ hits: [] });\r\n  const url = `https://localhost:5001/api/trees`;\r\n\r\n  let DataTree = [];\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let obj = [];\r\n      await axios\r\n        .get(url)\r\n        .then(response => {\r\n          console.log(response);\r\n          response.data.map(Main => {\r\n            obj.push({\r\n              title: Main.data[0].value,\r\n              key: Main.data[1].value,\r\n              isLeaf: Main.data[2].value\r\n            });\r\n          });\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      return obj;\r\n    }\r\n    DataTree = fetchData();\r\n  });\r\n  const layout = {\r\n    labelCol: {\r\n      span: 8\r\n    },\r\n    wrapperCol: {\r\n      span: 16\r\n    }\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 8,\r\n      span: 16\r\n    }\r\n  };\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  // const onSelect = (selectedKeys, otherValue) => {\r\n  //   debugger;\r\n  //   console.log(selectedKeys);\r\n  //   console.log(otherValue);\r\n  // };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <Popover\r\n        content={<a onClick={hide}>Close</a>}\r\n        title=\"Title\"\r\n        trigger=\"click\"\r\n        visible={Visible}\r\n        onVisibleChange={handleVisibleChange}\r\n      ></Popover> */}\r\n      <Tree\r\n        {...layout}\r\n        style={{ height: \"auto\", minHeight: \"570px\" }}\r\n        loadData={onLoadData}\r\n        onSelect={props.mySelect}\r\n        treeData={treeData}\r\n      />\r\n      <Form.Item>\r\n        <Button type=\"button\" onClick={() => props.myClick(\"Branch\")}>\r\n          Add new Branch\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => props.myClick(\"Employee\")}\r\n          value=\"Employee\"\r\n        >\r\n          Add new Employee\r\n        </Button>\r\n      </Form.Item>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n//TODO: move the keys away from a delimited string\r\n//      add popup instead of buttons to add\r\nDemo.propTypes = {\r\n  mySelect: PropTypes.func.isRequired,\r\n  myClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Demo;\r\n"]},"metadata":{},"sourceType":"module"}