{"ast":null,"code":"import _slicedToArray from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\TRISTAN\\\\Repos\\\\React-Reference-Data\\\\FluxTest\\\\src\\\\components\\\\AntTree.js\";\nimport React, { useState } from \"react\";\nimport { Tree, Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"antd/dist/antd.css\";\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\nimport { popup } from \"./popup\";\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return _objectSpread({}, node, {\n        children\n      });\n    }\n\n    if (node.children) {\n      return _objectSpread({}, node, {\n        children: updateTreeData(node.children, key, children)\n      });\n    }\n\n    return node;\n  });\n}\n\nfunction GetChildNodes(ParentKey) {\n  let children = GetTreeChildren(ParentKey);\n  return children;\n}\n\nexport function Demo(props) {\n  const _useState = useState(GetTreeData()),\n        _useState2 = _slicedToArray(_useState, 2),\n        treeData = _useState2[0],\n        setTreeData = _useState2[1];\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\n      resolve();\n    });\n  }\n\n  function toggleMenu({\n    clientX,\n    clientY,\n    event,\n    target\n  }) {\n    const component = Ext.Component.from(target);\n    const record = component.row && component.row.getRecord();\n    this.setState({\n      record\n    });\n\n    if (record) {\n      this.menu.showAt(clientX, clientY);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Tree, {\n    loadData: onLoadData,\n    onSelect: props.mySelect,\n    treeData: treeData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"primary\",\n    onClick: () => props.myClick(\"Branch\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Add new Branch\"), React.createElement(Button, {\n    type: \"primary\",\n    onClick: props.myClick,\n    value: \"Employee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Add new Employee\"));\n} //TODO: move the keys away from a delimited string\n//      add popup instead of buttons to add\n\nDemo.propTypes = {\n  mySelect: PropTypes.func.isRequired,\n  myClick: PropTypes.func.isRequired\n};\nexport default Demo;","map":{"version":3,"sources":["C:\\TRISTAN\\Repos\\React-Reference-Data\\FluxTest\\src\\components\\AntTree.js"],"names":["React","useState","Tree","Button","PropTypes","GetTreeData","GetTreeChildren","popup","updateTreeData","list","key","children","map","node","GetChildNodes","ParentKey","Demo","props","treeData","setTreeData","onLoadData","Promise","resolve","origin","toggleMenu","clientX","clientY","event","target","component","Ext","Component","from","record","row","getRecord","setState","menu","showAt","mySelect","myClick","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Tree, Button } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"antd/dist/antd.css\";\r\nimport { GetTreeData, GetTreeChildren } from \"./MockData\";\r\nimport { popup } from \"./popup\";\r\nfunction updateTreeData(list, key, children) {\r\n  return list.map(node => {\r\n    if (node.key === key) {\r\n      return { ...node, children };\r\n    }\r\n    if (node.children) {\r\n      return {\r\n        ...node,\r\n        children: updateTreeData(node.children, key, children)\r\n      };\r\n    }\r\n\r\n    return node;\r\n  });\r\n}\r\nfunction GetChildNodes(ParentKey) {\r\n  let children = GetTreeChildren(ParentKey);\r\n  return children;\r\n}\r\n\r\nexport function Demo(props) {\r\n  const [treeData, setTreeData] = useState(GetTreeData());\r\n\r\n  function onLoadData({ key, children }) {\r\n    return new Promise(resolve => {\r\n      if (children) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      setTreeData(origin => updateTreeData(origin, key, GetChildNodes(key)));\r\n      resolve();\r\n    });\r\n  }\r\n  function toggleMenu({ clientX, clientY, event, target }) {\r\n    const component = Ext.Component.from(target);\r\n    const record = component.row && component.row.getRecord();\r\n    this.setState({ record });\r\n\r\n    if (record) {\r\n      this.menu.showAt(clientX, clientY);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Tree\r\n        loadData={onLoadData}\r\n        onSelect={props.mySelect}\r\n        treeData={treeData}\r\n      />\r\n      <Button type=\"primary\" onClick={() => props.myClick(\"Branch\")}>\r\n        Add new Branch\r\n      </Button>\r\n      <Button type=\"primary\" onClick={props.myClick} value=\"Employee\">\r\n        Add new Employee\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n//TODO: move the keys away from a delimited string\r\n//      add popup instead of buttons to add\r\nDemo.propTypes = {\r\n  mySelect: PropTypes.func.isRequired,\r\n  myClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Demo;\r\n"]},"metadata":{},"sourceType":"module"}