{"ast":null,"code":"import \"antd/es/spin/style\";\nimport _Spin from \"antd/es/spin\";\nimport \"antd/es/dropdown/style\";\nimport _Dropdown from \"antd/es/dropdown\";\nimport \"antd/es/tree/style\";\nimport _Tree from \"antd/es/tree\";\nimport \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/menu/style\";\nimport _Menu from \"antd/es/menu\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/typography/style\";\nimport _Typography from \"antd/es/typography\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"E:\\\\TRISTAN\\\\Repos\\\\ReactReferenceData\\\\branches\\\\src\\\\components\\\\StructureTree\\\\StructureTree.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { BankOutlined, UserOutlined } from \"@ant-design/icons\";\nimport PropTypes from \"prop-types\";\nimport { GetBranchChildren, SearchStructure } from \"../../api/StructureApi\";\nconst {\n  Search\n} = _Input;\nconst {\n  Paragraph\n} = _Typography;\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      let isLeaf = children.length === 0;\n      return { ...node,\n        children,\n        isLeaf\n      };\n    }\n\n    if (node.children) {\n      return { ...node,\n        children: updateTreeData(node.children, key, children)\n      };\n    }\n\n    return node;\n  });\n}\n\nfunction StructureTree(props) {\n  const [searching, setIsSearching] = useState(false);\n  const [treeLoading, setTreeLoad] = useState(true);\n  const [treeData, setTreeData] = useState([]);\n  const [RCData, setRCData] = useState([]);\n  useEffect(() => {\n    const loadCurrentUserBranch = async () => {\n      const response = await GetBranchChildren();\n      if (response.errorMessage) _message.error(\"Failed to load tree structure, try again later\");else {\n        const treeData = response.map(node => {\n          node.icon = node.isBranch ? /*#__PURE__*/React.createElement(BankOutlined, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 39\n            }\n          }) : /*#__PURE__*/React.createElement(UserOutlined, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 58\n            }\n          });\n          node.isLeaf = !node.isBranch;\n          return node;\n        });\n        setTreeData(treeData);\n        setTreeLoad(false);\n      }\n    };\n\n    loadCurrentUserBranch();\n  }, [props.branchCode]); //on right click, open a dropdown at that location\n\n  const onRC = event => {\n    setRCData(event.node);\n    console.log(event.node);\n  }; //Right click menu\n\n\n  const menu = /*#__PURE__*/React.createElement(_Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, RCData.isBranch ? /*#__PURE__*/React.createElement(_Menu.Item, {\n    key: \"1\",\n    onClick: () => props.onMenuClick(\"Branch\", RCData.key),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Add new Branch\") : \"\", RCData.isBranch ? /*#__PURE__*/React.createElement(_Menu.Item, {\n    key: \"2\",\n    onClick: () => props.onMenuClick(\"Employee\", RCData.key),\n    value: \"Employee\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Add new Employee\") : \"\");\n\n  const mapStructureNode = node => {\n    node.icon = node.isBranch ? /*#__PURE__*/React.createElement(BankOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }\n    }) : /*#__PURE__*/React.createElement(UserOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 52\n      }\n    });\n    node.isLeaf = !node.isBranch;\n    return node;\n  };\n\n  const handleSearch = async searchKey => {\n    if (!searchKey) return;\n    setIsSearching(true);\n    setTreeLoad(true);\n    setTreeData([]);\n    const response = await SearchStructure(searchKey);\n    if (response.errorMessage) _message.error(response.errorMessage);else {\n      const searchedNodes = response.map(mapStructureNode);\n      setTreeData(searchedNodes);\n      setIsSearching(false);\n      setTreeLoad(false);\n    }\n  };\n\n  const onLoadData = ({\n    key,\n    children\n  }) => {\n    if (children.length !== 0) {\n      return Promise.resolve();\n    }\n\n    const loadSelectedNodeChildren = async () => {\n      const response = await GetBranchChildren(key);\n      if (response.errorMessage) _message.error(response.errorMessage);else {\n        const expandedChildren = response.map(mapStructureNode);\n        setTreeData(origin => {\n          return updateTreeData(origin, key, expandedChildren);\n        });\n      }\n    };\n\n    return loadSelectedNodeChildren();\n  };\n\n  return /*#__PURE__*/React.createElement(_Row, {\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(_Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(_Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    placeholder: \"search\",\n    loading: searching,\n    onSearch: handleSearch,\n    enterButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(_Col, {\n    span: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    className: \"light-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, \"Enter a branch name or code OR enter an employee surname OR staff number\"))), /*#__PURE__*/React.createElement(_Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(_Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(_Spin, {\n    size: \"small\",\n    spinning: treeLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Dropdown, {\n    overlay: menu,\n    trigger: [\"contextMenu\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(_Tree, {\n    showIcon: true,\n    height: 500,\n    showLine: true,\n    loadData: onLoadData,\n    treeData: treeData,\n    onSelect: props.onSelect,\n    draggable: props.draggable,\n    blockNode: props.draggable,\n    onRightClick: onRC,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }))))))));\n}\n\nStructureTree.prototype = {\n  branchCode: PropTypes.number.Required,\n  draggable: PropTypes.bool.Required,\n  onDrop: PropTypes.func,\n  onSelect: PropTypes.func.Required,\n  onMenuClick: PropTypes.func.Required\n};\nexport default StructureTree;","map":{"version":3,"sources":["E:/TRISTAN/Repos/ReactReferenceData/branches/src/components/StructureTree/StructureTree.js"],"names":["React","useEffect","useState","BankOutlined","UserOutlined","PropTypes","GetBranchChildren","SearchStructure","Search","Paragraph","updateTreeData","list","key","children","map","node","isLeaf","length","StructureTree","props","searching","setIsSearching","treeLoading","setTreeLoad","treeData","setTreeData","RCData","setRCData","loadCurrentUserBranch","response","errorMessage","error","icon","isBranch","branchCode","onRC","event","console","log","menu","onMenuClick","mapStructureNode","handleSearch","searchKey","searchedNodes","onLoadData","Promise","resolve","loadSelectedNodeChildren","expandedChildren","origin","onSelect","draggable","prototype","number","Required","bool","onDrop","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Tree,\n  Row,\n  Col,\n  Input,\n  Typography,\n  Spin,\n  message,\n  Dropdown,\n  Menu,\n} from \"antd\";\nimport { BankOutlined, UserOutlined } from \"@ant-design/icons\";\nimport PropTypes from \"prop-types\";\nimport { GetBranchChildren, SearchStructure } from \"../../api/StructureApi\";\nconst { Search } = Input;\nconst { Paragraph } = Typography;\n\nfunction updateTreeData(list, key, children) {\n  return list.map((node) => {\n    if (node.key === key) {\n      let isLeaf = children.length === 0;\n      return { ...node, children, isLeaf };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: updateTreeData(node.children, key, children),\n      };\n    }\n    return node;\n  });\n}\n\nfunction StructureTree(props) {\n  const [searching, setIsSearching] = useState(false);\n  const [treeLoading, setTreeLoad] = useState(true);\n  const [treeData, setTreeData] = useState([]);\n  const [RCData, setRCData] = useState([]);\n\n  useEffect(() => {\n    const loadCurrentUserBranch = async () => {\n      const response = await GetBranchChildren();\n      if (response.errorMessage)\n        message.error(\"Failed to load tree structure, try again later\");\n      else {\n        const treeData = response.map((node) => {\n          node.icon = node.isBranch ? <BankOutlined /> : <UserOutlined />;\n          node.isLeaf = !node.isBranch;\n          return node;\n        });\n        setTreeData(treeData);\n        setTreeLoad(false);\n      }\n    };\n    loadCurrentUserBranch();\n  }, [props.branchCode]);\n\n  //on right click, open a dropdown at that location\n  const onRC = (event) => {\n    setRCData(event.node);\n    console.log(event.node);\n  };\n  //Right click menu\n  const menu = (\n    <Menu>\n      {/* see if it is a branch, if it is, allow add new branch and add new employee */}\n      {RCData.isBranch ? (\n        <Menu.Item\n          key=\"1\"\n          onClick={() => props.onMenuClick(\"Branch\", RCData.key)}\n        >\n          Add new Branch\n        </Menu.Item>\n      ) : (\n        \"\"\n      )}\n      {RCData.isBranch ? (\n        <Menu.Item\n          key=\"2\"\n          onClick={() => props.onMenuClick(\"Employee\", RCData.key)}\n          value=\"Employee\"\n        >\n          Add new Employee\n        </Menu.Item>\n      ) : (\n        \"\"\n      )}\n    </Menu>\n  );\n\n  const mapStructureNode = (node) => {\n    node.icon = node.isBranch ? <BankOutlined /> : <UserOutlined />;\n    node.isLeaf = !node.isBranch;\n    return node;\n  };\n\n  const handleSearch = async (searchKey) => {\n    if (!searchKey) return;\n    setIsSearching(true);\n    setTreeLoad(true);\n    setTreeData([]);\n    const response = await SearchStructure(searchKey);\n    if (response.errorMessage) message.error(response.errorMessage);\n    else {\n      const searchedNodes = response.map(mapStructureNode);\n      setTreeData(searchedNodes);\n      setIsSearching(false);\n      setTreeLoad(false);\n    }\n  };\n\n  const onLoadData = ({ key, children }) => {\n    if (children.length !== 0) {\n      return Promise.resolve();\n    }\n    const loadSelectedNodeChildren = async () => {\n      const response = await GetBranchChildren(key);\n      if (response.errorMessage) message.error(response.errorMessage);\n      else {\n        const expandedChildren = response.map(mapStructureNode);\n        setTreeData((origin) => {\n          return updateTreeData(origin, key, expandedChildren);\n        });\n      }\n    };\n    return loadSelectedNodeChildren();\n  };\n\n  return (\n    <Row justify=\"space-between\">\n      <Col span={24}>\n        <Row>\n          <Col span={24}>\n            <Search\n              placeholder=\"search\"\n              loading={searching}\n              onSearch={handleSearch}\n              enterButton\n            />\n          </Col>\n          <Col span={16}>\n            <Paragraph className=\"light-text\">\n              Enter a branch name or code OR enter an employee surname OR staff\n              number\n            </Paragraph>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Spin size=\"small\" spinning={treeLoading}>\n              <Dropdown overlay={menu} trigger={[\"contextMenu\"]}>\n                <div>\n                  <Tree\n                    showIcon\n                    height={500}\n                    showLine={true}\n                    loadData={onLoadData}\n                    treeData={treeData}\n                    onSelect={props.onSelect}\n                    draggable={props.draggable}\n                    blockNode={props.draggable}\n                    onRightClick={onRC}\n                  />\n                </div>\n              </Dropdown>\n            </Spin>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n}\n\nStructureTree.prototype = {\n  branchCode: PropTypes.number.Required,\n  draggable: PropTypes.bool.Required,\n  onDrop: PropTypes.func,\n  onSelect: PropTypes.func.Required,\n  onMenuClick: PropTypes.func.Required,\n};\n\nexport default StructureTree;\n"]},"metadata":{},"sourceType":"module"}