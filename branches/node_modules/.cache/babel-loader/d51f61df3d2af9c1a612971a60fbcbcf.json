{"ast":null,"code":"const BranchURL = \"https://localhost:44385/api/Branches\";\nexport async function GetBranch(BranchKey) {\n  let url = `${BranchURL}${BranchKey}`;\n  let Branch = [];\n  let response = await fetch(url, {\n    method: \"GET\"\n  });\n  let json = await response.json();\n  json.map(Main => {\n    Branch.push({\n      Id: Main.id,\n      BranchCode: Main.branchCode,\n      BranchName: Main.branchName,\n      BranchCategoryId: Main.branchCategory.id,\n      ChannelId: Main.channel.id,\n      CanReceiveSale: Main.CanReceiveSale,\n      ParentBranchId: Main.Branch,\n      //or null\n      RegionId: Main.region.id,\n      //or null\n      IsActive: Main.isActive,\n      IsPostBox: Main.isPostBox,\n      OldCode: Main.oldCode //or null\n\n    });\n  });\n  return Branch;\n}\nexport async function UpdateBranch(BranchKey, BranchData) {\n  const url = `${BranchURL}${BranchKey}`; //create a body to put the info in\n\n  const response = await fetch(url, {\n    method: \"PUT\",\n    body: JSON.stringify(BranchData)\n  });\n  const json = await response.json();\n  if (json) return true;\n  return false;\n}","map":{"version":3,"sources":["E:/TRISTAN/Repos/ReactReferenceData/branches/src/api/Branch.js"],"names":["BranchURL","GetBranch","BranchKey","url","Branch","response","fetch","method","json","map","Main","push","Id","id","BranchCode","branchCode","BranchName","branchName","BranchCategoryId","branchCategory","ChannelId","channel","CanReceiveSale","ParentBranchId","RegionId","region","IsActive","isActive","IsPostBox","isPostBox","OldCode","oldCode","UpdateBranch","BranchData","body","JSON","stringify"],"mappings":"AAAA,MAAMA,SAAS,GAAG,sCAAlB;AAEA,OAAO,eAAeC,SAAf,CAAyBC,SAAzB,EAAoC;AACzC,MAAIC,GAAG,GAAI,GAAEH,SAAU,GAAEE,SAAU,EAAnC;AACA,MAAIE,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAC9BI,IAAAA,MAAM,EAAE;AADsB,GAAN,CAA1B;AAGA,MAAIC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAjB;AACAA,EAAAA,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAU;AACjBN,IAAAA,MAAM,CAACO,IAAP,CAAY;AACVC,MAAAA,EAAE,EAAEF,IAAI,CAACG,EADC;AAEVC,MAAAA,UAAU,EAAEJ,IAAI,CAACK,UAFP;AAGVC,MAAAA,UAAU,EAAEN,IAAI,CAACO,UAHP;AAIVC,MAAAA,gBAAgB,EAAER,IAAI,CAACS,cAAL,CAAoBN,EAJ5B;AAKVO,MAAAA,SAAS,EAAEV,IAAI,CAACW,OAAL,CAAaR,EALd;AAMVS,MAAAA,cAAc,EAAEZ,IAAI,CAACY,cANX;AAOVC,MAAAA,cAAc,EAAEb,IAAI,CAACN,MAPX;AAOmB;AAC7BoB,MAAAA,QAAQ,EAAEd,IAAI,CAACe,MAAL,CAAYZ,EARZ;AAQgB;AAC1Ba,MAAAA,QAAQ,EAAEhB,IAAI,CAACiB,QATL;AAUVC,MAAAA,SAAS,EAAElB,IAAI,CAACmB,SAVN;AAWVC,MAAAA,OAAO,EAAEpB,IAAI,CAACqB,OAXJ,CAWa;;AAXb,KAAZ;AAaD,GAdD;AAeA,SAAO3B,MAAP;AACD;AAED,OAAO,eAAe4B,YAAf,CAA4B9B,SAA5B,EAAuC+B,UAAvC,EAAmD;AACxD,QAAM9B,GAAG,GAAI,GAAEH,SAAU,GAAEE,SAAU,EAArC,CADwD,CAExD;;AACA,QAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAChCI,IAAAA,MAAM,EAAE,KADwB;AAEhC2B,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,UAAf;AAF0B,GAAN,CAA5B;AAIA,QAAMzB,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACA,MAAIA,IAAJ,EAAU,OAAO,IAAP;AACV,SAAO,KAAP;AACD","sourcesContent":["const BranchURL = \"https://localhost:44385/api/Branches\";\r\n\r\nexport async function GetBranch(BranchKey) {\r\n  let url = `${BranchURL}${BranchKey}`;\r\n  let Branch = [];\r\n  let response = await fetch(url, {\r\n    method: \"GET\",\r\n  });\r\n  let json = await response.json();\r\n  json.map((Main) => {\r\n    Branch.push({\r\n      Id: Main.id,\r\n      BranchCode: Main.branchCode,\r\n      BranchName: Main.branchName,\r\n      BranchCategoryId: Main.branchCategory.id,\r\n      ChannelId: Main.channel.id,\r\n      CanReceiveSale: Main.CanReceiveSale,\r\n      ParentBranchId: Main.Branch, //or null\r\n      RegionId: Main.region.id, //or null\r\n      IsActive: Main.isActive,\r\n      IsPostBox: Main.isPostBox,\r\n      OldCode: Main.oldCode, //or null\r\n    });\r\n  });\r\n  return Branch;\r\n}\r\n\r\nexport async function UpdateBranch(BranchKey, BranchData) {\r\n  const url = `${BranchURL}${BranchKey}`;\r\n  //create a body to put the info in\r\n  const response = await fetch(url, {\r\n    method: \"PUT\",\r\n    body: JSON.stringify(BranchData),\r\n  });\r\n  const json = await response.json();\r\n  if (json) return true;\r\n  return false;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}